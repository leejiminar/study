API 문서란?
- API의 동작과 사용 방법을 명확하게 설명하는 문서
- 개발자 간의 원활한 커뮤니케이션 도구

API 문서의 필요성
- 개발 효율성 증대 : API 이해 및 사용 속도 향상
- 유지보수 용이성 : 명확한 문서를 통한 유지보수 및 확장 용이
- 신뢰성 향상 : 오류 감소 및 신뢰성 높은 시스템 구축

API 문서의 활용 측면
- API 소비자의 이해를 돕고 개발 중 오류 방지
- 개발 프로세스 전반에서 효율성 및 품질 향상

Spring Rest Docs란?
- Spring Framework에서 API 문서를 자동화하는 도구
- API 동작을 테스트하면서 문서를 자동으로 생성

Spring Rest Docs 작동 과정
Test Case --Run Test ---> testDoc.abdc---l
                                         ㅏ-------Gradle Task---Processing--->index.html
                            index.adoc---l

Swagger 란?
- 개발한 Rest API를 편리하게 문서화
- 편리하게 API 호출 및 테스트 가능
- 백엔드와 프론트 개발자를 이어주는 다리역할

Swagger
- 인터렉티브한 문서화 제공
- 실시간 API 테스트 지원
- UI를 통해 API를 쉽게 탐색 호출 가능
- 빠르게 상호작용하는 문서가 필요할 때
- API를 소비하는 외부 개발자와의 협업 시 유용

Spring Rest Docs
- 테스트와 문서화를 통합 및 문서생성
- 코드 기반 문서화로 API 스펙 상세 표현
- 주석과 테스트 코드로 코드 동기화 유지
- 문서의 정확성과 코드 동기화가 중요한 프로젝트
- TDD 환경에서 문서화를 효율적으로 관리 할 때

Spring Boot 애플리케이션 패키징 방법
- 애플리케이션을 배포하기 위해 필요한 파일로 묶는 과정
- 코드, 리소스, 의존성 등을 하나의 파일로 통합

JAR/WAR 파일 생성
- Gradle 또는 Maven을 사용하여 JAR 또는 WAR 파일로 패키징
- JAR : 독립 실행형 애플리케이션으로 실행 가능
- WAR : 기존의 서블릿 컨테이너(Tomcat 등)에 배포하여 실행 가능

build.gradle 파일의 주요 구성요소
- plugins : 프로젝트에 필요한 플러그인 선언
- dependencies : 프로젝트에서 사용하는 라이브러리 및 의존성 관리
- tasks : 커스텀 빌드 작업 정의 및 설정

빌드 명령어
- "gradle build" 명령어를 사용하여 애플리케이션 파일 빌드
- 빌드 결과물로 JAR/WAR 파일 생성
- 빌드 과정에서 의존성 관리 및 소스 코드 컴파일 포함

로컬 실행
- 명령어 "java -jar build/libs/my-app.jar" 를 통해 애플리케이션 실행
- 로컬에서의 실행을 통해 배포 전 기능 검증

application.properties
- 개발, 테스트, 배포 환경에 따라 설정 가능
- 환경별로 다른설정 파일을 사용해 일관성 있고 유연한 애플리케이션 구성 가능

개발환경, 운영환경 다르게 적용 하는 방법
- "application-{profile}.properties" 또는 "application-{profile}.yaml" 파일 활용
- 예 : "application-dev.properties", "application-prod.yaml"
- 기본 설정은 "application.properties" 파일에 포함되며, 프로파일별 설정이 이를 덮어씀

빌드 시 프로파일 지정
- 빌드 또는 실행 시 "Dspring.profiles.active={profile" 옵션을 사용하여 특정 프로파일 활성화
- 개발 환경시 : "gradle bootRun -Dspring.profiles.active=dev"
- 운영 환경시 : "java -jar -Dspring.profiles.active=prod my-app.jar"
- 특정 환경에서 필요한 설정을 적용하여 애플리케이션 동작을 최적화

기본 배포 방법
- JAR 파일을 서버에 업로드
- 서버에서 "java -jar my-app.jar" 명령어로 애플리케이션 실행
- 배포된 애플리케이션이 백그라운드에서 지속적으로 실행되도록 관리
- 예) "nohup" 또는 "systemd" 활용

서버 환경 설정
- 서버에서의 환경 변수 설정
- 예) "export SPRING_PROFILES_ACTIVE=prod"
- 기본 서버 설정 방법
- 방화벽 설정 포트 개방
- 애플리케이션이 사용하는 리소스(메모리, CPU 등 ) 최적화
