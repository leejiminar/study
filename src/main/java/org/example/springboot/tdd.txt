TDD(Test Driven Development)
- 테스트 코드를 먼저 작성하고, 그 테스트를 통과하는 실제 코드를 작성하는 개발 방법론

TDD의 주요 원칙
- 테스트 실패 확인 - > 테스트 통과 가능 최소 코드 작성 -> 코드 개선 리팩토링 / 과정 반복

테스팅 (Testing)의 정의
- 소프트웨어의 품질, 성늘, 신뢰성을 평가하는 과정
- 프로그램 실행을 통해 오류를 발견하고 수정하는 활동
- 예상 결과와 실제 결과를 비교 및 검증

테스팅 (Testing)의 중요성
- 보안
- 성능 최적화
- 법적 사항 준수
- 개발자 신뢰도 증가

결함 발견
- 소프트웨어의 버그와 오류 식별
- 예상치 못한 동작이나 출력 찾기
- 시스템 충돌이나 성능 저하 원인 파악
- 보안 취약점 발견

품질 보증
- 요구사항 충족 여부 확인
- 사용자 기대치 만족 검증
- 신뢰성과 안정성 보장
- 성능 및 효율성 평가
- 사용성 및 접근성 검증

단위 테스트
- 개별 코드 단위(함수, 메서드, 클래스 등) 검증
- 격리된 환경에서 실행
- 빠른 실행 속도
- 개발자가 직접 작성 및 실행
- 회귀 테스트 기반

통합 테스트
-여러 단위를 조합하여 상호작용 검증
- 모듈 간 인터페이스 테스트
- 데이터 흐름 확인
- 종속성 관리 검증
- 외부 시스템과의 통합 테스트

시스템 테스트
- 전체 시스템의 ent-to-end 기능 검증
- 비기능적 요구사항 텍스트 (성능, 보안, 사용성 등)
- 실제 운영 환경과 유사한 조건에서 실행
- 사용자 시나리오 기반 테스트
- 스트레스 테스트 및 부하 테스트

인수 테스트
- 고객 또는 최종 사용자 관점에서의 테스트
- 비즈니스 요구사항 충족 여부 확인
- 사용자 스토리 기반 테스트
- 알파 테스트 및 베타 테스트 포함
- 계약상 명시된 인수 기준 검증

테스트 (Test) 프로세스
- 계획 -> 설계 -> 실행 -> 평가
- 계획하고, 설계 한 뒤, 실행 하고, 평가

테스팅 프로세스 - 계획단계
- 테스트 목표 설정: 프로젝트 요구사항 분석 테스트 벙위 결정
- 테스트 전략 수립: 테스트 레벨 정의 (단,통,시,인) 테스트 유형 선택 (기능, 성능, 보안)
- 리소스 할당: 인력, 시간, 도구 배정
- 일정 수립: 주요 마일스톤 설정 테스트 활동 일정 계획

테스팅 프로세스 - 설계단계
- 테스트 케이스 작성: 요구사항 기반 케이스 도출
- 테스트 데이터 준비: 유효/무효 입력 데이터 구성
- 테스트 스크립트 개발: 자동화 테스트 스크립트 작성
- 테스트 환경 구성: 하드웨어, 소프트웨어 환경 테스트 도구 선택 및 설치

테스팅 프로세스 - 실행단계
- 테스트 수행: 계획된 테스트 케이스 실행 수동 / 자동화 테스트 진행
- 결과 기록: 테스트 결과 상세 문서화 발견된 결함 보고
- 결함 추적 및 관리: 버그 리포트 작성 우선순위 및 심각도 평가
- 재테스트 및 회귀 테스트: 수정된 결함 확인 변경 사항으로 인한 영향 분석

테스팅 프로세스 - 평가단계
- 테스트 결과 분석: 성공/실패 케이스 검토
- 테스트 커버리지 평가: 테스트 완성도 확인
- 품질 메트릭스 산출: 결함 발견을 파악
- 개선 사항 도출: 테스트 프로세스 효율성 검토 및 피드백

테스팅 (Testing)의 한계
- 완벽한 테스팅의 불가능성
- 모든 입력과 시나리오를 테스트하는 것은 불가능
- S/W 복잡성으로 인해, 예상치 못한 상황 발생 가능
- H/W, OS 등 모든 변수를 고려한 테스트는 불가능
- 시간, 비용, 기술력, 인력

TDD(Test Driven Development)
- 소프트웨어 개발 방법론 중의 하나
- 테스트 코드를 먼저 작성한 후 실제 코드를 개발
- 실패 테스트 작성 -> 테스트 통과 최소 코드 작성 -> 리팩토링
- 위 과정을 반복하는 것이 TDD 의 핵심
- 소프트웨어 품질 향상과 개발 생산성 중대를 위한 주요 방법론으로 인정받음

1. 테스트 먼저 작성
- 코드 구현 전 테스트 케이스 작성
- 요구사항을 테스트로 변환
- 명확한 목표 설정 가능
- 테스트 가능한 셜계 유도

2. 최소한의 코드 작성
- 테스트 통과에 필요한 최소한의 코드만 구현
- 불필요한 복잡성 방지
- YAGNI(You Aren't Gonna Need It) 원칙 적용
- 빠른 피드백 루프 생성

3. 리팩토링 (Refactoring)
- 테스트 통과 후 코드 개선
- 중복 제거 및 가독성 향상
- 설계 개선 및 츄지보수성 증대
- 테스트 슈트를 통한 안전한 리팩토링 보장

4. 추가 고려사항
- 세 원칙의 반복적 적용
- 각 단계 간 빠른 전환
- 지속적인 품질 개선 추구
- 개발자의 규율과 집중 요구

TDD 사이클 (Red, Green, Refactor)
Red: 구현되지 않았으므로 테스트는 반드시 실패
Green: 코드 품질은 고려 NO,통과만 가능하도록 OK
Refactor: 줄복제거, 가독성 향상, 구조 개선 등

TDD 방식
- 테스트 -> 구현 -> 리팩토링
- 테스트를 먼저 작성하여 요구사항을 명확히 함

TDD 외 방식
- 설계 -> 구현 -> 테스트
- 구현 후 테스트하여 버그 발견이 늦어질 수 있음

TDD의 이점
1.코드 품질 향상
- 테스트를 먼저 작성하여 설계 개선
- 작은 단위의 기능 구현으로 복잡성 감소
- 리팩토링을 통한 지속적인 코드 개선
- 테스트 가능한 코드 작성으로 모듈화 증가

2.버그 감소
- 초기에 버그 발견 및 수정 가능
- 회귀 테스트로 새로운 기능 추가 시 기존 기능 보장
- 엣지 케이스에 대한 고려로 예외  상황 처리 개선
- 지속적인 테스트로 버그 유입 가능성 감소

3.문서화 개선
- 테스트 코드가 살아있는 문서 역할
- 요구사항과 기능 명세를 테스트로 표현
- 새러운 팀원의 온보딩 과정 간소화
- 코드 이해도 향상으로 유지보수 용이성 증가
- 별도의 문서 작성 필요성 감소

4.설계 개선
- 테스트 작성 과정에서 인터페이스와 기능이 명확히 작성 필요
- 모듈화와 재사용성 증가
- 단일 책임 원칙(SRP) 준수 유도
- 의존성 주입(DI)과 같은 설계 패턴 자연스럽게 적용
- 불필요한 복잡성 제거로 간결한 설계 달성

5.코드 품질 향상
- 테스트를 먼저 작성하여 설계 개선
- 작은 단위의 기능 구현으로 복잡성 감소
- 리팩토링을 통한 지속적인 코드 개선
- 테스트 가능한 코드 작성으로 모듈화 증가

6.리팩토링 용이성
- 테스트 스위트가 안전망 역할
- 코드 변경 시 즉작적인 피드백 제공
- 리팩토링 후 기능 정상 작동 보장
- 기술 부채 감소 및 코드 품질 유지
- 지속적인 코드 개선 문화 조성

TDD 구현 단계
1단계 : 요구사항 분석
- 요구사항 파악
- 사용자 스토리
- 기능 세부동작

2단계 : 테스트 실행
- 작성한 테스트 코드 실행
- 의도적 실패 테스트 확인
- 실패 메시지 분석

3단계 : 테스트 통과
- 작성코드 재실행
- 모든 테스트 케이스 통과 여부확인
- 실패 시 코드 수정
- 다시 테스트

4단계 : 테스트 실행
- 새로운 기능에 대한 테스트 케이스 추가
- 실패 확인 및 원인 분석

5단계 : 테스트 통과
- 전체 텍스트 스위트 실행
- 새로운 테스트 및 기존 테스트 통과 확인

TDD 기업 사례
- 출시 전 결함 밀도의 감소
- 초기 결함 감지 및 해결
- 지속적인 테스트의 누적 효과
- 생산성 저하 없이 품질 향상
