HTML(Hyper Text Markup Language)
웹 페이지의 구조와 내용

CSS(Cascading Style Sheet)
웹 페이지의 모양

JS(JavaScript)
웹 페이지의 동적 변경

HTML의 정의와 역할
- 웹 페이지와 그 내용을 구조화하기 위한 마크업 언어
- HyperText Markup Language의 약자로, 웹 페이지를 구성하는 데 사용되는 마크업 언어
- 웹 무선의 구조와 내용을 정의
- "태그"를 이용하여 텍스트, 이미지, 링크 등의 요소를 표시하고 구성

태그 ex)
 <태그이름 속석="속성값">콘텐츠</태그이름>

태그 : 요소의 시작과 끝 표시하는 마크업 기호
태그의 용도 : 텍스트, 이미지가 있어야 할 부분 포시
규칙 :
- <>로 묶인 부분이 태그
- 여는 태그와 닫는 태그는 이름이 같아야 함
- / 유무로 구분

태그이름 : 해당 태그가 어떤 콘텐츠를 표시하는지 의미
콘텐츠 : 태그 사이에 태그가 실제로 표시할 콘텐츠(내용) 작석
속석 : 태그에 부가 기능 추가하기 위해 작성하는 것으로 선택사항
속석값 : 속성에 부여된 기능이나 설정을 구체적으로 지정하는 값

HTML의 기본 뭄법 : self-closing tags
- 태그 내부에 콘텐츠나 텍스트를 포함하지 않아 </tag>형태로 닫을 필요가 없는 태그들
- 자체적으로 닫아줘도 되지만, 브라우저는 동일하게 햇걱
- <tag>와 <tag/>는 브라우저에게는 동일하게 해석됨
- 이왕이면 <tag/ 형태로 닫아주는 걸 추천!
ex) <br/>, <img/>, <input/>

텍스트 관련 요소
1.h 태그
- 제목 태그 : 제목이나 부제목을 표현 h1 ~ h6 까지 존재하고 h1이 가장 큰 주제 표현
2.p 태그
- 단락 태그 : 문단을 표현 문단 내용을 열린 태그와 닫힌 태그 사이에 입력
3.ul,li 태그
- 순서가 없는 목록과 목록 요소 태그
- 순서가 정해지지 않은 목록과 그 목록의 각 요소들 표현
4.ol,li 태그
- 순서가 있는 목록과 목록 요소 태그
-순서가 정해진 목록과 그 목록의 각 요소들 표현
5.컨테이너
- 요소들을 묶어서 구조화 하거나 스타일링을 적용하는 역할을 하는 요소
- 웹 페이지의 레이아웃과 내용을 조직화
- div : Block 수준의 컨테이너 요소
- span : Inline 수준의 컨테이너 요소

<div> : Block 수준의 컨테이너 요소
- 새로운 줄 시작 (블록 수준의 요소는 항상 새로운 줄에서 시작)
- 전체 너비 차지 (블록 수준의 요소는 부모 요소의 너비를 모두 차지)

<span> : Inline 수준의 컨테이너 요소
- 줄 내에서 표시
- 텍스트 단락 안에서 줄바꿈 없이 일부 텍스트만 묶어 스타일 적용을 위해 사용

전역 속성
- class : 페이지 내에서 여러 요소에 동일한 스타일을 적용하고 싶을 때 같은 class 이름을 각각의 요소에 부여
- id : 요소에 고유한 식별자 부여

class 속성
- 요소를 그룹화 또는 식별하기 위해 활용
- CSS, JavaScript에서 클래스 이름을 활용하여 요소 선택
- 요소에 'class' 속성을 추가하고 속성 값으로 클래스 이름 지정
- 한 요소에 요러 클래스 할당 가능
- 여러 요소에 동일 클래스 이름 반복적으로 할당 가능
- 클래스는 공백으로 구분 (class="main important")

id 속성
- 해당 HTML 문서 내에서 유일해야 함!
- 하나의 요소에 한 개의 id만 할당 가능
- 요소에 'id' 속성을 추가하고 속성 값으로 id 이름 지정
- CSS, JavaScript에서 id를 활용하여 요소 선택
- id, class 이름 규칙
1) 대소문자 구분
2) 공백이나 특수 문자 포함 불가
3) 숫자나 문자로 시작, 숫자로만 이루어진 경우 사용 불가

class와 id의 공통점 및 차이점
공통점 : 요소에 대한 속성으로, 요소를 식별하거나 선택자로 사용 가능
차이점 : class 는 중복 사용 O, id 는 중복 사용 X
        class 하나의 요소에 여러 class 사용 O, id 는 하나의 요소에 오직 하나만 사용 O
        class 여러 요소를 동시에 선택할 때 선택자로 사용, id 페이지 내에서 특정 요소 하나만 선택할 때 선택자로 사용

이미지 요소
- HTML 에서 이미지를 표시하기 위해 사용
- <img src="이미지_파일_경로" alt="대체_템스트" />
- 'src' 속성 : 이미지의 파일 경로 지정 (필수)
- 'alt' 속성 : 이미지를 설명하는 대체 텍스트 (이미지가 로드되지 않았을 때 표시되는 문구, 시각 장애인을 위해 중요한 역할)

링크 요소
- a 태그 이용 : 다른 웹 페이지, 현재 페이지 내의 다른 위치로 이동 가능
- <a href="링크_URL" target="_blank">링크_텍스트</a>
- 'href' 속성 : 링크의 대상 YRL을 지정 (필수)
- 'target' 속성 : "_self" : 현재 탭에서 이동 (default), "_blank" : 새로운 탭에서 이동

테이블 생성
- <table> 태그 이용
- 데이터를 행(row)과 열(column)의 조합으로 구조화 하여 표현
- <tr> : 행을 나타내는 요소 (자손으로 th, td 태그를 포함)
- <th> : 헤더 셀을 나타냄 (열 또는 행의 제목 표시), 굵은 글씨로 표현
- <td> : 데이터 셀을 나타냄 (실제 데이터 표시)

폼 양식
- 사용자로부터 입력을 받을 수 있는 HTML 양식
- <form> : 폼 요소들을 감싸며 HTML의 form 양식을 정의
- method : 사용자가 입력한 내용들을 서보 쪽으로 어떻게 넘겨줄 지 지정 (GET, POST 방식 존재)
- name : 폼의 이름을 지정, 한 문서 내에 여러 개의 form tag가 존재할 경우, 폼들을 구분하기 위해 사용
- action : 데이터를 전송할 URL이나 서버 쪽의 script 파일명, 보통 서버의 프로그램과 연결되는 주소
- label : 폼 요소에 레이블을 붙이기 위한 태그 ("for" 속석 : 연결할 입력 요소의 id 값)
- input : 다양한 입력을 받고 type 속성을 통해 입력 필드의 종류 지정 가능
          type 속성 : input 의 유형을 결정하는 속석
          name 속성 : form 제출 시 해당 입력 값의 이름(key)이 되는 값
          이 외에도 value, minlength, maxlength, disabled, placeholder 등등...
- textarea : 여러 줄의 텍스트를 입력할 수 있는 입력 필드
             cols, rows 속성 : textarea의 행과 열 개수를 지정하여 기본 사이즈 조정
             placeholder, name 속성 : input 과 동일

Semantic 태그
- <div> 태그와 동일한 컨테이너 태그
- 단순히 구획만 나누는 <div> 태그와 다르게 해당 요소의 역할과 의미를 예측 가능하게 함
- 태그만 보고도 역할이나 위치를 파악 가능
- HTML5 이전 버전에서는 div 태그를 이용 -> 이름 지정 시 제약이 없어 이후에 문서 구조 파악이 어려움
- *Semantic 태그 이용 시 HTML 문서의 가독성과 유지보수성이 좋아짐
- 웹 브라우저가 HTML  소스 코드만 보고도 어느 부분이 제목인지, 본문인지 쉽게 알 수 있음
  글을 소리로 읽어주는 기계(스크린 리더기)를 사용하는 경우 사이트의 구조를 소리로 구분 가능하게 함
- 검색 엔진이 검색 수행 시 HTML 태그를 분석할 수 있음 (*SEO)

Semantic 태그의 종류
<header> : 웹  페이지, 섹션의 헤더 (제목, 로고 등 포함)
<nav> : 네비게이션 링크 (웹 페이지의 주요 링크 포함)
<main> : 주요 콘텐츠 영역
<article> : 독립적인 콘첸츠 블록 (뉴스 기사, 블로그 글, 포스트처럼 독립적으로 배포 가능한 내용 처리)
<aside> : 사이드바 표시
<footer> 웹 페이지, 섹션의 footer(저작권 정보, 연락처 정보, 관련 링크)

CSS의 역할과 중요성 소개 (웹 페이지의 스타일링, 레이아웃 등의 디자인을 지정하는 언어)
- 디자인과 스타일링: CSS를 사용해 웹 페이지의 레이아웃, 색상, 글꼴, 크기 등을 지정해 웹사이트를 디자인
- 일관성과 유지 보수성 : CSS를 사용하면 스타일을 별도의 파일에 정의해 여러 페이지에 일관된 스타일 적용 가능하고,
                     스타일 변경이 필요할 때 스타일 시트만 수정해 일관성 유지 가능
- 접근성 : CSS를 사용해 웹 페이지의 구조와 스타일을 분리해 웹 접근성 향상

스타일 적용의 우선순위
- 스타일 적용 방법들이 혼합되어 사용될 경우, 최종적으로 적용되는 스타일은 우선순위는 다음과 같음
1. 인라인 스타일(HTML 요소 내부에 위치)
2. 내부 / 외부 스타일 시트 (HTML 문서의 head 요소 내부에 위치)
3. 웹 브라우저 기본 스타일
- 인라인 스타일이 적용된 태그는 내부, 외부 스타일 시트에 상관없이 무조건 인라인 스타일 적용
- 내부 스타일 시트와 외부 스타일 시트는 가장 마지막에 적용된  스타일 시트가 적용

전체 선택자 : *를 사용
태그 선택자 : p1, h1, div 등 요소를 선택해 스타일 지정
아이디 선택자 : # 을 이용하여 ID 이름으로 스타일 지정
클래스 선택자 : . 을 이용하여 클래스 이름으로 스타일 지정하는 선택자
자식 선택자 : > 사용하여 직접적인 자식 요소를 선택
그룹 선택자 : , 를 사용하여 여러 개의 선택자를 그룹으로 묶어 스타일 지정 ex) h1, h2, p { text-align : center; }
가상 선택자 : 석택자에 추가하는 키워드로, 특정한 목적을 위해 사용되는 선택자
- 가상 클래스 선택자 : 특정 상태에 있는 요소를 선택하여 스타일 적용 ex) :hover, :active
- 가상 요소 선택자 : 특정 요소의 일부분에 스타일 적용 ex) ::before, ::after