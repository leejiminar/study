window -> document -> html -> body

이벤트 종류
- 마우스 이벤트
- 키 이벤트
- 폼 이벤트

이벤트 핸들러
- 이벤트가 발생했을 때 처리를 담당하는 함수
  지정된 이벤트가 발생하면, 그 요소에 등록된 이벤트 핸들러를 실행한다.
- HTML 요소의 'on이벤트명' 속성에 동작 추가하는 방법
  HTML 코드에 JS 코드가 포함되는 방식으로, 권장하지 않는다.

이벤트 핸들러 등록 - node 객체 프로퍼티
- node 객체의 'on이벤트명' 프로퍼티에 핸들러 함수를 등록하는 방법

이벤트 핸들러 등록 - addEventListener
- 첫 번째 인수로 '이벤트명' 전달, (on을 붙이지 않음)
- 두 번째 인수로 핸들러 함수 전달

event 객체
- 이벤트 핸들러 함수에 첫 번째 인수로 전달되는 객체
-> 해당 이벤트에 대한 정보와 기능이 담겨 있다.

event 객체 - 마우스 정보
- 마우스 관련 이벤트의 경우 event 객체를 통해
  마우스에 대한 정보를 얻을 수 있다.(위치, 클릭 정보 등)

event 객체 - 키보드 정보
- 키보드 관련 이벤트의 경우 event 객체를 통해 키보드에 대한 정보를 얻을 수 있다.(누른 키 정보 등)
  이처럼 각 이벤트 발생에 대한 정보를 event 객체를 통해 얻을 수 있다.

event 객체 - target
- 'event.target' 프로퍼티를 통해 이벤트가 발생한 타겟 요소의 node 객체에 접근할 수 있다.

event 객체 - preventDefault
- form 태그에서 submit 버트의 기본 동작은 form 제출 -> 새로고침
- 이 기본 동작을 막기 위해 event 객체의 'event.preventDefault()' 메서드 사용한다.

이벤트 핸들러 제거 - removeEventListener
- 'removeEventListener' 메서드로 등록된 이벤트 핸들러를 제거할 수 있다.

이벤트 propagation
- DOM에서 버튼 요소는 3개의 부모 요소와 그 상위 노드인 <body>, <html>, document, window 등이 있다.
- 가장 하위 요소인 버튼을 클릭하면 모든 요소에서 이벤트가 발생한다 = 모든 요소에서 이벤트를 캐치할 수 있다.
- 이벤트가 발생하면, 이 이벤트는 DOM 트리를 통해 전파된다. 이를 이벤트 propagation 이라고 한다.
