ORM 이란?
-Object Relational Mapping (객체 - 관계 - 매핑)
- 어플리케이션 객체와 관계형 데이터베이스의 데이터를 매핑해주는 도구
- 대표적인 ORM 으로는 Hibernate, JPA 등이 존재

ORM 의 필요성
- 객체 모델과 관계형 모델 간의 불일치 존재
- 데이터베이스 접근을 프로그래밍 언어의 관점에서 접근
- ORM 을 이용해서 객체 간의 관계를 바탕으로 SQL을 자동 생성하여 불일치 해결

ORM 의 장점
- 직관적인 코드로 데이터를 조작할 수 있음
- 재사용 및 유지보수 편리
- DBMS에 대한 종속성 감소

JPA 개요
- Java Persistence API
- Java ORM 기술 표준
- JPA는 인터페이스의 모음
- 인터페이스이기 때문에 Hibernate나 EclipseLink 등으로 JPA를 구현

하이버네이트(Hibernate)
- JPA 인터페이스 명세를 구현한 구현체 중 하나
- 하이버네이트가 가장 널리 사용되고 있는 구현체이지만
  EclipseLink나 OpenJPA 등 다른 구현체를 선택해서 사용 가능

Spring Data JPA
- Spring에서 JPA를 편리하게 사용할 수 있게 지원하는 라이브러리
- Hibernate에서 자주 사용되는 기능을 보다 쉽게 사용할 수 있게 구현

영속성 컨텍스트
- 영속성 컨텍스트는 엔틴티(Entity)를 영구 저장하는 환경
- 애플리케이션과 데이터베이스 사이에서 객체를 보관하는 가상의 데이터베이스 역할을 수행
- 엔티티 매니저(EntityManger)를 통해 엔티티를 저장하거나 조회하면 엔티티 매니저는 영속성 컨텍스트에 엔티티를 보관하고 관리
- 서비스에는 하나의 엔티티 매니저 팩토리(EntityManager Factory)가 존재하며
  엔티티 매니저 팩토리에서 데이터베이스에 접근하는 트랜잭션이 생길 때 마다 엔티티 매니저를
  생성하여 영속성 컨텍스트에 접근

비영속 (New/Transient)
- 엔티티 객체를 생성했지만 아직 영속성 컨텍스트에 저장하지 않은 상태

영속 (Managed)
- 엔티티 매니저를 통해서 엔티티를 영속성 컨텍스트에 저장된 상태
- 영속성 컨텍스트에 의해 관리되는 상태

준영속 (Detached)
- 영속성 컨텍스트가 관리하던 영속 상태의 엔티티를 더 이상 관리하지 않음
- 영속성 컨텍스트가 제공하는 기능이 동작하지 않는 상태

삭제 (Removed)
- 엔티티를 영속성 컨텍스트와 데이터베이스에서 삭제된 상태