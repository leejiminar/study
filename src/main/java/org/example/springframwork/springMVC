MVC 패턴이란
- Model-View-Controller
- 사용자 인터페이스와 비즈니스 로직을 분리
- 모듈화, 유지보수성, 재사용성, 확장성에 용이

Before MVC 패턴
- 비즈니스 로직과 UI 로직의 혼재
- 모든 로직이 하나의 파일에 집중
- 코드 수정 시 영향 범위 넓음
- 새로운 기능 추가 및 테스트의 어려움
- 협업의 비효율성

Model : 작업 처리 결과 데이터(요리)
Controller : 사용자 입력/전달/업데이트(주문 받기 & 서빙)
View : 유저 인터페이스(플레이팅)

Controller
- 모델과 뷰 사이의 연결 고리 역할
- 뷰에서 사용자의 입력을 받아 모델 업데이트
- 모델의 변경 사항을 다시 뷰에 반영

View
- 데이터를 사용자에게 보여주는 사용자 인터페이스 담당
- 모델의 데이터를 표현
- 사용자의 입력을 받아 컨트롤러에 전달

Server Side Rendering(SSR)
- 서버에서 최종적인 HTML을 만들어 전달
- HTML 템플릿에 동적으로 데이터 생성
- 주로 정적인 화면에 사용
- 화면 새로고침 발생
- JSP, Thymeleaf, FreeMarker 등...


Client Side Rendering(CSR)
- 클라이언트 쪽에서 HTML 렌더링
- 필요한 데이터만 서버에 요청
- 화면 새로고침 X (필요한 부분만 동적으로 변경)
- 주로 동적인 화면에 사용 (ex. 구글 지도)
- React, Vue, Angular 등...

    특징              SSR                 CSR
 렌더링 위치           서버              클라이언트
  초기 로딩            빠름                느림
    SEO              우수                어려움
   복잡성          서버 코드 복잡    클라이언트 코드 복잡
     UX          초기 로딩 후 빠름     부드러운 이터렉션
  서버 부하            높음                 낮음
  사용 사례       블로그, 뉴스 사이트   대화형 웹 앱, SPA