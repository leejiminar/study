쿠키, 세션 및 보안 개념
보안이란?
- 승인되지 않은 엑세스나 오용, 오동작, 수정, 파괴, 부적절한 노출 등으로부터 보호하는 프로세

보안의 중요성
- 개인 정보 보호
- 금융 정보 보안
- 사이버 공격 보호

보안의 사고 발생
- 데이터 유출은 막대한 법적 비용을 초래

기존 로그인 프로세스
- 폼 로그인의 패스워드 인중 방식
- HTTP 기본 인증 방식

현대적인 로그인 프로세스
- 다중 인증 요소(지식, 소유, 생체)MFA
- 단일 로그인 방식(Single Sign-On, SSO)
- SSO의 대표적인 예시 Google
- SSO의 2가지 유형
  1. 인증 위임 모델
  2. 인증 정보 전달 모델
- 계속해서 발전하는 다양한 로그인 프로세스

현대적인 로그인 프로세스의 장점
- 강화된 보안
- 사용자 경험 개선
- 보안 유연성

보안 - 쿠키와 세션
- 보안을 이해하고 활용하기 위해 선행적으로, 쿠키(Cookie)와 세션(Session)의 필요성 재고

쿠키란?
- 서버에서 사용자 브라우저로 전송하는 Key-Value 형태의 작은 데이터로 사용자의 웹 브라우저에 저장

쿠키를 사용하는 이유
- HTTP의 비연결성(Connectionless)과 상태 없음(Stateless) 특징 보완

쿠키의 특징
- Key-Value 형태의 데이터
- 클라이언트 로컬에 저장
- 로컬 저장으로 인한 변조 가능성
- 유효 기간 설정 가능
- 유효 기간 중에는 브라우저 종료 후에도 유지

쿠키의 동작 과정
- 쿠키는 헤더(Header)를 통해 데이터를 전달

쿠키의 문제점
- 클라이언트 저장 위치 문제
  1. 쿠키는 브라우저에 저장
  2. 탈취 및 위변조 위험이 존재!(쿠키 하이재킹)
- 보안 취약성
  1. XSS 공격으로 쿠키 탈취 가능
  2. 중요한 정보가 노출되거나 위조, 변조 가능
- CRSF 공격에 취약
  1. 쿠키가 자동으로 요청에 포함
  2. 공격자가 악의적인 요청을 서버에 전달할 수 있음
- 선능 문제
  1. 쿠키의 크기제한 (일반적으로 4KB)
  2. 모든 요청에 쿠키가 포함되어 트리팩이 증가

쿠키의 장단점
- 장점
  1. 상태 유지
  2. 사용자 경험 개선
  3. 편리한 인증

- 단점
  1. 보안 취약성
  2. 크기 제한
  3. 성능 영향

쿠키의 문제점 극복
- XSS 공격을 막기 위한 Spring Security HttpOnly 설정

세션이란?
- 세션(Seesion)은 서버에서 사용자의 상태를 유지하고 관리하기 위해 사용되는 개념

세션을 사용하는 이유
- HTTP의 상태 없음(Stateless)을 극복하고 사용자의 상태를 관리하기 위해 사용

세션의 특징
- 서버에 정보를 저장(세션 쿠키)
- 각 클라이언트에 고유 ID를 부여
- 서버 용량이 허용하는 한에서 데이터의 제한이 없음

세션의 동작 과정
- 세션 ID는 쿠키(세션 쿠키)에 담겨 클라이언트에 전달
- ID를 통해 서버에서 세션에 접근하여 데이터를 사용
- 세션은 메모리에 저장

세션의 장단점
- 장점
  1. 보안
  2. 데이터 용량
  3. 제어 하기 수월함
- 단점
  1. 서버 자원 사용
  2. 확장성
  3. 브라우저 호환성

세션의 문제점
- Scale-out 한 다중 서버에서 세션 불일치 문제
  1. 서버분산 환경에서 세션 데이터가, 서버 간 일치하지 않아 인증 문제가 발생!
  2. 세션을 여러 서버에 돈기화하기 위한, 추가적인 기술 (세션 스토리지)이 필요
- RAM 사용으로 인한 서버 메모리 부족
  1. 세션 정보가 서버 메모리에 저장됨에 따라, 대규모 트래픽 발생 시 메모리가 부족할 수 있음
  2. 활성화된 사용자가 많을수록 메모리 사용량이 급격히 증가하므로 비용발생
- 세션 탈취(Session Hijacking)
  1. 공격자가 사용자의 세션 ID를 탈튀하여, 권한을 도용할 수 있는 보안 취약점이 발생
  2. 네트워크 상에서 세션 ID가 탈취되거나, 클라이언트 측에서 악성코드로 인해 발생
- 세션 고정(Session Fixation)
  1. 공격자가 미리 세션 ID를 설정하고, 사용자를 설정한 세션 ID에 로그인하게 유도하는 공격 기법
  2. 세션 생성 이나 관리 단계의 보안 취약점을 악용해, 사용자의 인증 정보를 탈취
- CSRF(Cross-Site Request Forgery)
  1. 사용자가 인증된 세션을 가진 상태에서, 공격자가 악의적인 요청을 서버에 전달하여,
     사용자의 권한으로 실행하게 되는 공격 기법

세션의 문제점 - 해결1
- 세션 불일치와 서버 메모리 부족을 해결하기 위해
  Redis와 같은 In-memory 데이터베이스를 활용한 세션 외부화
- SameSite를 통해 CSRF 예방
- CSRF 토큰을 사용하여 CSRF 극복

쿠키, 세션 - 실제 적용 예시
            온라인 쇼핑몰             온라인 뱅킹 시스템               소셜 미디어 플랫폼                 블로그
쿠키 :      브라우저 선호도        기기 인증 정보 로그인 간소화       로그인 기록 사이트 탐색 설정           설정 저장
세션 :  로그인 상태 장바구니 정보   거래 세부 정보 개인 금융 정보        타임라인 메시지 및 알림          로그인 상태 글 작성

Spring Security 의 필요성
- 여러 해킹 기법이 존재하지만, 방어 코드를 통해 충분히 방지 가능
- Spring Security는, 이러한 보안을 도와주는 Spring 보안 프레임 워크

