git이란?
- 버전 관리 시스템
- 버전이랑 프로그램을 수정, 개선할 때의 변화가 결과물로 나온 것
- 개발자에게 버전 관리를 잘 하는 것은 중요

README.md
- 파일은 이름에서 알 수 있듯, 프로젝트 코드를 살펴보기 전에 코드가 어떻게 구성됐는지, 아키텍처는 어떻게 구성됐는지 등 프로젝트의 내용을 정리하는 문서입니다.
- README 문서를 작성하기 위해선 Markdown 언어를 작성해야 합니다.

Working directory
- 내가 코드를 작성하는 공간
- 코드를 생성, 수정, 삭제되는 공간

Status area (stage)
- 버전이 될 코드가 존재하는 공간
- Working directory에서 버전으로 만들고 싶은 파일 들을 저장하는 공간

local repository
- 버전이 저장되어 있는 공간

명령어
- git init : local repository 생성 (.git 파일)
- git status
- git add : stage 영역에 추가
- git add . : 숨긴 파일까지 다 stage에 넘김
- git add * : 숨기지 않은 파일을 다 stage에 넘김
- git commit -m : 커밋하고 메시지 추가
- git remote add origin 깃주소
- git push origin master
- git fetch origin master
- git merge origin master

- git branch <브랜치명>    브랜치 생성
- git branch    브랜치 확인
- git checkout <브랜치명>    브랜치 전환
- git switch <브랜치명>    브랜치 전환
- git switch -c <브랜치명>    브랜치 생성하고 이동
- git merge <브랜치명> 브랜치 병합
  git merge --abort  병합 취소

  git reset --hard abc1234  원하는 commit으로 reset ### 모든 변경 사항 삭제되니 꼭!!! 백업할것
             --hard              변경사항 삭제
             --soft              변경사항 유지

git clone : 프로젝트를 가져오고 깃 저장소도 생성

.gitignore : 버전관리 대상에서 제외하는 기능

메인 Branch
보조 Branch(feature branch)
릴리즈 Branch
핫픽스 Branch

git 충돌발생
git fetch origin master
git commit -m "메시지"
git merge origin/master
충돌 파일 해결하고 다시 commit, push하기
위 방법으로 안될 때는 우선 프로젝트 전체나 파일,폴더를 백업하고
git fectch origin master
git reset --hard /origin/master  (--hard이므로 기존 내용 다 사라지고 서버로 받아오기)
그래도 또 안되면 Project 백업하고 새로 만들어서 clone하기
git clone <주소>