AOP란?
- Aspect Oriented Programming
- 공통 관심 사항과 핵심 관심 사항을 분리시키는 프로그래밍 기법

AOP 도입 배경
- 객체지향 프로그래밍(OOP)의 한계
- 객체 간 협력과 상호 작용은 좋지만 코드의 반복과 관심사의 분리의 어려움

Spring AOP
- Sring에서 제공하는 AOP 구현체
- 공통의 관심사를 모듈화하여 관리할 수 있는 편의 기능들을 제공

Spring AOP 프록시 객체
- Spring AOP는 프록시 객체를 자동 생성하여 AOP를 구현
- 클라이언트와 타겟 객체 간의 중개 역할
- 요청을 가로채고 필요한 로직을 추가

AOP의 핵심 개념
- 어드바이스를 핵심 기능 코드에 적용하는 것
- 컴파일 시, 클래스 로딩 시, 런타임 시 위빙으로 구분 가느이 대부분 런타임 시 위빙 사용
- Spring AOP도 런타임 시 위빙 사용

Aspect
- 공통 관심 사항에 대한 특정 기능을 지칭
- Advice + Pointcut의 조합으로 구성
- 트랜잭션, 보안, 로깅 등

Advice
- 공통 관심 사항과 적용 시점을 정의함, joinpoint에서 실행되는 코드
- 타겟 객체에 종속되지 않기 때문에 순수하게 공통 기능에만 집중

Advice의 종류
- @Before - 타겟 객체의 메서드 호출 전에 공통 기능을 실행
- @After - 타겟 객체의 메서드 호출 후에 공통기능을 실행
- @AfterReturning - 값을 반환한 경우 공통 기능을 실행
- @AfterThrowing - 예외가 발생한 경우 공통 기능을 실행
- @Around - 타겟 객체의 메서드 호출 전과 후, 예외 발생 시

joinpoint
- Adivce가 적용될 수 있는 위치
- Spring AOP에서는 "메서드 호출"에 대한 조인 포인트만 제공

Pointcut
- 조인 포인트의 부분 집합으로 공통 기능이 적용될 대상을 선정하는 방법
- Spring AOP의 조인 포인트는 메서드 호출이므로 포인트컷은 메서드를 선정하는 것과 관련

AOP의 단점 및 주의점
- 복잡도 증가
- 성능 저하
- 오용의 가능성
- 프레임워크 업데이트에 취약
- 테스트의 어려움

Pointcut - execution 명시자
ex) execution([접근 제어자] 반환타입 [패키지/클래스] 메서드명 (매개 변수 타입|"..", ...) [throw 예외]