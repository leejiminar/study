객체 간 상호 협력하는 객체지향
- 객체지향에서는 여러 객체에 나누어 객체 간 협력하여 기능함
- 객체들을 서로 연결할 수 있도록 객체 간 참조를 사용

객체지향과 DB의 패러다임 불일치
- 객체지향에서는 객체 간 참조를 사용해 객체들을 연결해 기능하게 함.
- DB에서는 테이블의 외래키를 사용해 정규화를 함
- 테이블 간의 연관관계와 엔티티 간 연관관계 차이가 발생함

연관 관계 매핑
- 데이터베이스의 엔티티 간 관계를 정의하는 방법
- 객체 모델과 관계형 데이터베이스 간의 일관성을 유지

연관 관계 매핑
- 연관 관계 설정을 통해 객체 참조와 테이블의 FK를 매핑시켜 사용함
- 방향성(Direction), 다중성(Multiplicity) 두 가지 기준

방향성
- 단방향 : 두 엔티티 관계에서 한쪽 엔티티만 참조
- 양방향 : 두 엔티티 관계에서 양쪽 엔티티가 서로 참조 A->B, B->A
- 예를 들어, 게시글 객체가 참조 변수를 통해 댓글 객체만 참조하게 되면 단방향
- 댓글 객체도 게시글 객체를 참조 변수를 통해 참조한다면 양방향
- 테이블은 FK 로 양쪽 방향을 참고할 수 있으므로 언제나 양방향 관계
- 즉, FK 인 POST_ID 로 양쪽으로 조인할 수 있음

연관 관계 주인
- 연관 관계에서 외래키를 관리하는 쪽
- 데이터베이스에 실제로 저장되는 관계를 정의
- 연관 관계의 변경 시 일관성을 유지
- 일반적으로 FK 키를 가진 쪽이 연관 관계의 주인이 됨
- 주인이 아닌 엔티티는 읽기 작업만 가능함
- 연관 관계 주인은 @JoinColumn 어노테이션을 통해 정의

다중성
- 일대일(1:1), 일대다(1:N), 다대일(N:1), 다대다(N:M)가 있음
- 댓글과 게시글의 관계는 다대일 관계
- 게시글 입장에서 댓글 관계를 보면 일대다 관계
- 연관관계를 어떤 엔티티를 중심으로 보는지에 따라 연관관계 표현은 달라짐

다대일 단방향을 이해하기 위해 다음과 같은 예시를 들어보자
1. 댓글(comment)들은 하나의 글(post)에 달려있다. (댓글 N: 글 1)
2. 댓글을 조회했을 때, 댓글이 속해 있는 글도 같이 조회된다.
3. 글을 통해 댓글에 접근할 수 없다.

다대일 양방향을 이해하기 위해 다음과 같은 예시를 들어보자
1. 댓글(comment)들은 하나의 글(post)에 달려있다.(댓글 N: 글 1)
2. 댓글을 조회했을 때 댓글이 속해 있는 글도 같이 조회된다.
3. 글을 통해서도 댓글에 접근할 수 있다.

엔티티 기본 매핑
- @Entity: 해당 클래스가 엔티티임을 명시
- @Table: 데이터베이스에서 사용할 테이블 이름을 명시
- @Id: 엔티티의 고유 식별자 필드를 정의
     , 데이터베이스에서 기본키로 사용
- @GeneratedValue: 기본 키의 값을 자동으로 생성하는 설정
                 , 기본키 생성 전략 설정 가능
                 , GeneratedType.IDENTITY는 데이터베이스에서 자동 증가 사용
- @Column: 필드에 대한 제약 조건을 설정
         , name, nullable, unique 등 옵션 작용 가능

연관 관계 매핑
    관계           어노테이션           Entity매핑                       예
- 다대일(N:1)      @ManyToOne      Comment(N) : Post(1)        여러 댓글에 하나의 글
- 일대다(1:N)      @OneToMany      Post(1) : Comment(N)        하나의 글에 여러 댓글
- 일대일(1:1)      @OneToOne       Country(1) : Capital(1)     나라와 수도, 사용자와 프로필 정보
- 다대다(N:M)      @ManyToMany     Order(N) : Item(M)          주문과 상품, 수업과 학생

영속성 전이
- 특정 엔티티끼리 생명주기가 같은 경우가 있음
- 예를 들어 글(post)이 삭제되는 경우 글에 달린 댓글(comment)들은 독립적으로 존재할 수가 없기 때문에 글이 삭제될 때 같이 삭제 되어야함
- 엔티티 생명주기가 다른 엔티티와 연관되어 있는 경우, 영속성 전이(cascade)를 사용해 관리
- 영속성 전이 종류 :
  ALL : 모든 작업(상태)에 대해 영속성 전이
  PERSIST : Persist 할 때 연관된 엔티티도 Persist
  MERGE : 엔티티를 영속성 컨텍스트에 Merge 할 때 연관 엔티티도 Merge
  REMOVE : DB와 영속성 컨텍스트에서 연관 엔티티도 제거
  REFRESH : 엔티티 새로고침 시 연관 엔티티도 새로고침
  DETACH : 엔티티를 영속성 컨텍스트에서 Detach 하면 같이 Detach

- @OmeToMany(cascade=CascadeType.ALL) 처럼 어노테이션 옵션으로 사용
- 다섯 가지 옵션 존재 : ALL, PERSIST, MERGE, REMOVE, REFRESH, DETACH
- 가장 많이 사용되는 ALL, PERSIST