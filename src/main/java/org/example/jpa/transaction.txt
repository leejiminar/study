트랜잭션이란?
- 데이터베이스의 일관성을 유지하기 위해 수행되는 작업의 집합
- 예를 들면, 계좌 이체를 하나의 트랜잭션이라 생각해 보면
  A의 계좌 금액 출금 + B의 계좌 금액 입금이 하나의 작업 단위
- 하나의 트랜잭션에서 문제가 발생 시, 전체를 이전 상태로 되돌림 => 롤백(Roll-back) 처리
-하나의 작업을 안전하게 처리하도록 보장

- Transaction Commit : 작업들이 성공해서 DB에 반영하는 것
                     계좌 이체 + 계좌 돈 받기 모두가 정상 작동
- Transaction Rollback : 하나의 작업이라도  실패하면 전체 작업의 DB 반영 이전으로 되돌리는 것
- 하나의 작업을 안전하게 처리하도록 보장하기 위해서 여러 작업을 하나의 트랜잭션으로 관리해야 함

트랜잭션의 특징 (ACID)
- 원자성 (Atomicity) : 작업을 더이상 쪼갤 수 없음을 의미
                      논리적으로 하나의 작업으로 인식하여 둘 다 성공하든가 둘 다 실패하든가
                      => All or Nothing
- 일관성 (Consistency) : 모든 트랜잭션은 일관성있는 데이터베이스 상태를 유지
                        비즈니스 로직에서 의도한 대로 일관성 있게 저장되거나 변경되어야 함

- 격리성(Isolation) : 여러 개의 트랜잭션이 있는 경우 각각 독립적으로 실행 되어야 함
                     각 트랜잭션이 서로에게 영향을 받지 않도록 보장해야 함

- 지속성 (Durability) : 트랜잭션이 완료되는 그 결과는 지속되어야 함.
                       시스템 종료 또는 장애 시에도 데이터는 보존되어야 함

ACID 총 정리
- 원자성 : 트랜잭션이 완전히 성공하거나 완전히 실패하는 단일 단위로 처리되도록 보장
- 일관성 : 무결성 제약조건처럼 모든 트랜잭션은 일관성 있는 데이터베이스 상태를 유지
          트랜잭션이 영향을 받는 데이터를 허용된 방식으로만 변경해야 한다는 요구사항
- 격리성 : 병행되는(동시 실행) 트랜잭션들이 서로 독릭
          즉, 서로에게 영향이 없게 하기 위해 각각 트랜잭션을 격리
          동시에 같은 리소스(데이터)를 작업하지 않게 만들어야 함.
- 지속성 : 트랜잭션이 성공하면, 결과가 기록되어야 함.
          data가 persistence(영속성)됨.

트랜잭션 관리자
- Transaction Manager: 데이터베이스와의 트랜잭션을 관리
- DataSourceTransactionManager(JDBC 기반), JpaTransactionManager(JPA 기반), HibernateTransaction Manager(하이버네이트 기반)

@Transactional
- Spring에서 트랜잭션 경계를 설정하기 위한 어노테이션
- 메서드 또는 클래스의 실행을 하나의 트랜잭션으로 묶어 데이터 일관성을 보장
- 클래스 레벨과 메서드 레벨에 적용 가능

@Transactional 주요 기능
- propagation: 트랜잭션 전파 방식 설정 (REQUIRED, REQIRES_NEW, NESTED)
- isolation: 트랜잭션 격리 수준 설정 (READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE)
- timeout: 트랜잭션 타임아웃 설정
- rollbackFor: 롤백할 예외 지정

propagation : 트랜잭션 전파 방식 설정
- REQUIRED : 현재 트랜잭션이 존재하면 이를 사용, 없으면 새로 생성
- REQUIRES_NEW : 항상 새 트랜잭션 생성, 기존 트랜잭션은 중단
- NESTED : 중첩 트랜잭션(지원하는 경우에만)

isolation: 트랜잭션 격리 수준 설정
- READ_UNCOMMITTED : 다른 트랜잭션의 변경사항 읽기 가능
- READ_COMMITTED : 커밋된 변경사항만 읽기 가능
- REPEATABLE_READ : 동일 쿼리 결과 일관성 유지
- SERIALIZABLE : 가장 높은 격리 수준, 완전한 독립성 보장

트랜잭션 처리 시 이슈
- 서비스 계층은 비즈니스 로직, 데이터액세스 계층에서 DB 접근 처리
- 비즈니스 로직 안에서 트랜잭션 처리를 하게되어, 데이터 처리가 비즈니스 로직에 의존되는 문제 발생 => AOP의 사용

AOP를 통한 문제 해경
- 서비스 계층을 수정하지 않고도 트랜잭션을 구현할 수 있음

트랜잭션의 중요성
- 데이터 무셜성 유지
- 비즈니스 로직의 일관성 보장
- 동시성 문제 해결