토큰 기반 인증 방식
- Stateless 통신을 가능하게 하며 세션 기반 인증 시 시스템의 일부 한계 발전

토큰 기반 인증의 작동 원리
1. 로그인 단계 : 사용자가 자신의 인증 정보를 서버에 제공
2. 인증 및 토큰 발금 : 서버는 제공된 인증 정보를 검증, 검증 성공 시 사용자에 대한 토큰 생성
3. 토큰 전송 : 생성된 토큰을 클라이언트에게 전송
4. 토큰 저장 및 사용 : 클라이언트는 받는 토큰을 저장 및 모든 요청에 해당 토큰을 포함시켜 인증 정보를 활용
5. 서버의 토큰 검증 : 서버는 클라이언트로부터 받은 요청에 포함된 토큰 검증 후 처리

토큰 기반 인증 장점
- 보안성 강화
- 확장성 및 유연성
- 접근 제어 및 권한 부여
- 단일 로그인(SSO) 구현 용이

토큰 기반 인증 특징
- JWT는 서명(Signature)된 토큰, 발급 후 이후 내용이 변경되지 않았음을 보장
- 즉, 토큰을 발급한 다음에는 토큰 정보 변경이 불가능하기 때문에 무결성 유지
- 인증 정보가 담긴 토큰은 서버가 아닌 클라이언트에 있기 때문에, 서버에 저장할 필요가 없다
- 즉, 서버는 세션 상태를 유지할 필요가 없기 때문에 서버의 부하가 감소하고 확장성이 향상
- 토큰 기반 인증은 다양한 플랫폼(웹, 모바일)과 애플리케이션에서 쉽게 구현하고,
  사용할 수 있으며, 여러 서비스와 시스템 간의 통합이 용이
- 서버가 여러 개일 경우 사용자 세션이 한 서버에 묶이지 않기 때문에 로드 밸런싱과 서버 간 요청 처리가 용이
- 한 번 로그인으로 여러 시스템이나 서비스에 접근할 수 있어 사용자 경험이 향상(Single Sign-On, SSO)

Statleless 인증 시스템의 중요성
                정의                   특징                    장점             단점
            서바가 사용자의        서버는 세션 정보를 저장        보안 강화       서버 부하 증가
상태 유지     인증 상태를          클라이언트는 세션 ID 이용       사용자별         확장성 제한
(Stateful)  세션으로 관리                                   맞춤형 상호작용


            서버가 인증 상태를          인증 토큰은 권한 관련    서버 부하 감소      토큰 관리 및
상태 비유지   저장하지 않음            정보 소유 매 요청에 포함  시스템 확장성 향상   보안에 주의 필요
(Stateless)각 요청마다 토큰을 이용

토큰 인증 방식의 보안 측면 고려 사항
1. 토큰의 안전한 생성
   - 강력한 암호화 알고리즘 사용 : 토큰 생성 시 충분한 에트로피를 확보하고 강력한 암호화 알고리즘을 사용하여 토큰 생성
   - 민감 정보의 포함을 피하기 : 토큰에 민감한 정보(비밀번호, 개인 식별 정보 등)를 직접 포함시키지 않아야 함
2. 토큰의 전송 보안
   - HTTP 사용 : 모든 토큰 전송은 HTTP를 통해 이루어져야 하며 이를 통해 중간자 공격(Man-in-the Middle Attack)으로부터 보호할 수 있음
   - 헤더를 통한 토큰 전송 : 토큰은 주로 HTTP 헤더를 통해 전송되며 URL 파라미터를 통한 전송은 피해야 함
3. 토큰의 저장 방법
   - 클라이언트 측 보안 : 토큰은 쿠키, 로컬 스토리지, 세션 스토리지 중 보안적으로 적합한 곳에 저장 필요,
                       쿠키에 저장할 경우 Secure, HttpOnly 옵션을 통해 XSS 공격으로부터 보호 필수
   - 모바일 애플리케이션 : 보안이 강화된 저장소(Keychain, Keystore)에 토큰 저장
4. 토큰의 유효기간 관리
   - 짧은 유효 기간 설정 : 토큰은 탈취 되었을 경우 피해를 줄이기 위해 가능한 짧은 유효 기간 설정
   - 만료된 토큰 처리 : 시스템은 토큰의 만료를 적절히 처리할 수 있어야 하며, 사용자에게 새 토큰을 발급하거나 재인증을 요구할 수 있어야 함
5. 접근 제어와 권한 관리
   - 세밀한 권한 설정 : 토큰에는 사용자 권한 수준이 명시되어야 함, 서버는 이를 기반으로 사용자가 요청하는 리소스나 작업에 대한 접근 제어
   - 권한 변경 시 토큰 재발급 : 사용자의 권한 수준이 변경되었을 경우, 해당 변경 사항을 반영하기 위해 새로운 토큰 발급
6. 토큰 갱싱 및 패기
   - 토큰 갱신 매커니즘 구현 : 사용자가 계속 활동 중일 때 서비스 중단 없이 보안을 유지하기 위해 토큰 갱신(refresh token) 매커니즘 구현
   - 토큰 패기 : 사용자가 로그아웃하거나 토큰이 탈취되었다고 의심될 경우, 해당 토큰을 즉시 폐기하고 접근을 차단

JWT(JSON Web Token)
- JWT은 당사자 간에 안전하게 정보를 전달하기 위한 간결하고 자체 포함된 방법을 정의하는 개방형 표준(RFC 7519)

JWT 장점
- 사용자 인증에 필요한 모든 정보가 토큰에 있어 별도의 인증 저장소가 필요하지 않음
- 분산 마이크로 서비스 환경에서 중앙 집중식 인증 서버와 데이터베이스에[ 의존하지 않음
- 토큰 서명을 확인하는 작업에 CPU를 사요하여 I/O 또는 네트워크 엑세스가 필요하지 않아 웹 서버 하드웨어에서 확장이 쉬움

JWT 단점
- 토큰은 클라이언트에 저장되어 데이터베이스에서 사용자 정보를 조작해도 토큰에 직접 적용 불가
- 더 많은 필드가 추가되면 토큰의 크기가 커질 수 있음
- 토큰은 대부분의 요청에 포함되기 때문에 데이터 트래픽 크긷에 영항을 미칠 수 있음

JWT 구성 요소
- Header : 토큰 유형을 비롯해 관련된 서명 알고리즘을 정의
- Payload : 토큰 발급자, 토큰 유효기간 등을 정의
- Signature : 보안 서명을 통해 메시지가 전송 과정에서 바뀌지 않을 것을 확인


