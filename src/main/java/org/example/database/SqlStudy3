UNION (합집합 (중복 제거), 정렬 과정이 발생하나 최종 정렬은 ORDER BY 사용.)
- 두 개의 테이블을 하나로 만드는 연산
- UNION에 사용할 컬럼의 수와 데이터 형식이 일치해야 하며 합쳔 후에 테이블에서 중복된 데이터는 제거
  이를 위해 UNION은 테이블을 합칠 때 정렬 과정을 발생시킴
-관계형 대수의 일반 집합 연산에서 합집합의 역할
ex) SELECT A, B FROM alpha
    UNION
    SELECT A, B FROM beta

UNION ALL (중복 허용, 정렬 과정도 없음.)
ex) SELECT A, B FROM alpha
    UNION ALL
    SELECT A, B FROM beta

INTERSECT
ex) SELECT A, B FROM alpha
    INTERSECT -- 교집합(중복 제거)
    SELECT A, B FROM beta

EXCEPT
ex) SELECT A, B FROM alpha
    EXCEPT -- 차집합(위를 기준, 중복과 아래는 버림)
    SELECT A, B FROM beta

--------------------Oracle 기준-------------------------
계층형 질의
- 테이블에 계층형 데이터가 존재하는 경우
  데이터를 조회하기 위해 사용하는 것
  대표적인 데이터베이스로 ORACLE, SQL Server 등 ...

계층형 데이터 : 동일 테이블에 계층적으로 상위와 하위 데이터가 포함되어 있는 데이터
ex) SELECT LEVEL, 자식 컬럼, 부모 컬럼, 원하는 컬럼
    FROM 테이블명;

    START WITH 부모 컬럼 IS NULL CONNECT BY PRIOR 사원번호 = 관리자;

CONNECT BY 키워드
-LEVEL
-CONNECT_BY_ROOT
-CONNECT_BY_ISLEAF
-SYS_CONNECT_BY_PATH(A, B)
-NOCYCLE
-CONNECT_BY_ISCYCLE
--------------------Oracle 기준-------------------------
--------------------MySQL/MariaDB 기준-------------------------
WITH RECURSIVE cte(member_id, manager_id, lvl)
AS (
    SELECT member_id, manager_id, 0 as lvl
    FROM member
    WHERE manager_id IS null
    UNION all
    SELECT a.member_id, a.manager_id, b.lvl + 1
    FROM member a
    JOIN cte AS b
    ON a.manager_id = b.member_id
    )

SELECT member_id, manager_id, lvl
FROM cte
ORDER BY member_id, lvl;
--------------------MySQL/MariaDB 기준-------------------------

- INNER JOIN (JOIN)
  내부 JOIN 이라고 하며 JOIN 조건에서 동일한 값이 있는 행만 반환
  INNER JOIN은 JOIN의 기본값으로 'INNER'생략 가능

- OUTER JOIN (LEFT JOIN, RIGHT JOIN)
  두 테이블을 조인할 때, 1개의 테이블에만 데이터가 있어도 결과가 나온다.
  LEFT OUTER JOIN: 왼쪽 테이블의 모든 값이 출력되는 조인
  RIGHT OUTER JOIN: 오른쪽 테이블의 모든 값이 출력되는 조인
  FULL OUTER JOIN: 왼쪽 외부 조인과 오른쪽 외부 조인이 합쳐진 것

- USING 조건절 (SQL Server에서는 지원X)
  같은 이름을 가진 컬럼들 중 원하는 컬럼에 대해서만 선택적으로 등가 조인 가능

- 뷰(View)
  1) 뷰는 다른 테이블에서 파생된 테이블
  2) 물리적으로 데이터가 저장되는 것이 아니라,
  논리적으로만 존재하며 뷰를 사용한 지의 시에는
  DBMS에서 뷰 정의에 따라 질의를 시작
  뷰의 특징
  - 생성된 뷰는 또 다른 뷰를 생성하는데 사용될 수 있다.
  - 뷰의 정의는 변경할 수 없으며, 삭제 후 재생성이 필요하다.
  - 뷰를 통한 갱신에는 제약이 따른다 갱신을 위해서는 기본적으로 원천 테이블의 기본키가 포함되어야 한다.
  - 원천이 되는 테이블이나 뷰가 삭제되면 이를 기반으로 하는 뷰도 함께 삭제된다.
  ex)
  CREATE [OR REPLACE] VIEW view
  SELECT column1, column2, ...
  FROM table_name
  WHERE condition

-CUME_DIST()
 주어진 그룹에서의 '상대적인 누적분포'를 계산
 전체를 한 줄로 나열했을 때 '0에서 1사이의 값'으로 표현
 쉽게 말해 그룹 내에서 '상대적 위치를 계산'

-순위함수
순위 함수는 결과셋을 바탕으로 특정기준으로 데이터의 순위를 매겨주는 함수 입니다.
순위 함수, 랭크 함수, 윈도우 함수라고도 부릅니다.

ROW_NUMBER()
RANK()
DENSE_RACK()
NTILE()
PERCENT_RANK()
CUME_DIST()
LEAD()
FIRST_VALUE(), LAST_VALUE()
대표적으로 위 종류가 있으며, 해당 함수 모두 사용 시 OVER()절과 함께 사용된다는 특징이 있습니다.

ROW_NUMBER() / RANK() / DENSE_RANK()
값 개별에 대해 순위를 매겨주는 함수들 입니다.

-- 사용법
# ROW_NUMBER()
ROW_NUMBER() OVER([PARTITION BY 그룹기준열] ORDER BY 순위기준열 {ASC/DESC})
랭킹 매길 때 같은 값이 있어도 그냥 1,2,3순으로 쭉 매긴다는 특징이 있습니다.

# RANK()
RANK() OVER([PARTITION BY 그룹기준열] ORDER BY 순위기준열 {ASC/DESC})
랭킹 매길 때 같은 값이 있으면 같은 순위로 매기고 그 동률의 개수만큼 순위를 빼고 다음 순위 매깁니다.

# DENSE_RANK()
DENSE_RANK() OVER([PARTITION BY 그룹기준열] ORDER BY 순위기준열 {ASC/DESC})
랭킹 매길 때 같은 값이 있으면 같은 순위로 매기고 해당 순위 이어서 다음 순위 매깁니다.

NTILE()
순위 그룹을 나눠서 해당 값의 어떤 순위 그룹에 들어있는지를 반환해주는 함수입니다.

PERCENT_RANK() / CUME_DIST()
각 개별 순위를 매긴 후 해당 순위의 백분위를 구하는 함수입니다.

PERCENT_RANK()
입력한 기준의 순위에서 해당 값이 위치하는 상대 순위 백분율을 출력 합니다.
(현재순위 - 1) / (전체행수 -1)
CUME_DIST()
입력한 기준의 순위에서 해당 값이 위치하는 누적 분포 백분율을 출력 합니다.
(현재순위) / (전체행수)

LEAD()
인자로 입력된 기준열 기준으로 입력된 오프셋만큼 거리의 행의 해당 열 값을 반환합니다.
(음수 : 위로 이동 / 양수 : 아래로 이동)

FIRST_VALUE() / LAST_VALUE()
특정 기준으로 순위를 매긴 결과셋에서 첫번째 값(FIRST_VALUE()), 마지막 값(LAST_VALUE())를 반환해주는 함수 입니다.

FIRST_VALUE() : OVER(ORDER BY)에 작성한 정렬순서에서 가장 첫번째 행을 반환 합니다.
LAST_VALUE() : OVER(ORDER BY)에 작성한 정렬순서에서 해당 행까지 정렬을 한 상태에서 마지막 행을 반환합니다.
즉, FIRST_VALUE() 정렬순선 상 항상 첫번째 행을 반환하기 때문에 항상 그 값이 같지만, LAST_VALUE()의 경우 현재 처리중인 행까지만 정렬한 상태에서 마지막 행을 반환하기 때문에 각 행마다 마지막 행으로 반환되는 값이 다를 수 있습니다.

PARTITION BY 그룹기준열 : 작성한 컬럼의 데이터 기준으로 데이터를 그룹화 합니다. (생략하면 전체 기준으로 순위매김)
ORDER BY 순위기준열 [정렬조건] : 작성한 컬럼의 정렬조건 기준으로 순위를 산정합니다.
동률 값에 대한 순위 지정 방식의 차이점이 있으며 이외에는 동일합니다.


1. ROLLUP (Oracle, SQL Server) , WITH ROLLUP(MariaDB, SQL Server)
가장 기본적인 통계 명령은 그룹별로 집계를 구하는 GROUP BY 입니다.
여러 개의 기준 필드를 지정하여 각 기준별로 그룹을 나누어 합계나 평균을 구할 수 있습니다.

2. CUBE (Oracle, SQL Server Only)
ROLLUP은 1차 그룹핑 기준 필드에 대해서만 소계를 구합니다.
그룹핑 순서에 따라 결과셋이 달라지며 소계를 구할 필드를 먼저 그룹핑해야 합니다.
이에 비해 CUBE 함수는 모든 기준 필드에 대한 소계를 다 구합니다.
CUBE는 여러 단계를 거쳐 조합한 결과셋을 생성하기 때문에
대량의 데이터에 대한 소계를 구할 때는 CUBE가 ROLLUP보다 느립니다.
CUBE는 모든 기준 필드의 소계를 다 계산하므로 그룹핑 순서를 바꾸어도 같은 결과셋을 만듭니다.

3. GROUPING SETS (Oracle, SQL Server Only)
GROUPING SETS 함수는 개별 그룹에 대한 집계는 생략하고 그룹별 소계만 계산합니다.
CUBE의 결과셋에서 부서와 성별이 모두 있는 행과 전체 합계는 빼고
성별, 부서별 중간 소계만 출력합니다.
한쪽 필드가 NULL인 것만 요약적으로 출력합니다.
그룹핑 기준의 개수에 따라 각 함수가 출력하는 결과셋이 다릅니다.
기준이 하나뿐일 때 GROUPING SETS는 쓰나 마나이며,
ROLLUP, CUBE의 출력 결과가 같습니다.
결국 이 함수들은 그룹핑 기준이 2개 이상일 때 실용적입니다.
ROLLUP, CUBE의 동작은 어렵지 않지만 결과셋이 직관적이지 않습니다.
NULL로 표시한 행은 소계라는 뜻인데,
직관적으로 알아보기 어렵습니다.
GROUPING 함수는 소계행이면 1을 리턴하며 그렇지 않으면 0을 리턴합니다.
부서별 소계에서 이 함수가 무엇을 리턴하는지 출력해보겠습니다.