예외 처리의 개념과 필요성

예외란?
- 일반적인 실행의 흐름을 바꾸는 몇 가지 상황
예외 처리란?
- 예외를 처리하도록 설계한 프로그래밍 기법

Error
- 시스템 수준에서 발생하는 치명적인 문제 ( 개발자가 직접 처리할 수 없음 )
- 메모리 부족,  JVM 중단, 스택 오버플로우 등의 문제로 프로그램의 실행을 중단
Exception
- 프로그램 수준에서 발생하는 예외
- 컴파일 예외(Checked Exception)과 런타임 예외(Unchecked Exception) 존재

Checked 예외
- 컴파일 시점에 체크되는 예외
- 반드시 처리해야 함 (try-catch 블록 또는 throws 선언 필요)
- 주로 외부 시스템과의 상호 작용에서 발생(파일 입출력, 데이터 베이스 연결 등)
- IOException, SQLEception, ClassNotFoundException 등

Unchecked 예외
- 컴파일 시점에 체크되지 않는 예외
- 선택적으로 처리 가능(처리하지 않아도 컴파일 오류 없음)
- 주로 프로그래밍 오류나 논리적 오류에서 발생 ( 잘못된 인덱스 접근, null 등)
- NullPointerException, ArrayIndexOutOfBoundsException 등

Checked Exception
- 발생 시점 : 컴파일 시 발생할 수 있는 예외
- 처리 의무 : 반드시 예외 처리 코드 필요 (try-catch or throws)
- 예시 : IOException, SQLException
- RuntimeException 상속 여부 : 상속 X
- 예외 전파 : 발생한 메서드 내에서 처리하지 않으면 상위 호출로 전파

Unchecked Exception
- 발생 시점 : 실행 중 발생하는 예외
- 처리 의무 : 예외 처리 코드 선택적
- 예시 : NullPointerException, IllegalArgumentException
- RuntimeException 상속 여부 : 상속 O
- 예외 전파 : 명시적으로 예외를 처리하지 않아도 상위 호출로 전파

예외처리의 중요성
- 안정성 강화
- 문제에 대한 정확한 정보 제공
- 프로그램의 유연성 향상
- 사용자 경험 향상

예외처리 전략의 중요한 요소 6가지
1. 예외의 종류를 분류하자
2. 적절한 예외 타입을 활용하자
3. 예외를 던지고, 처리할 위치를 선정하자
4. 발생한 예외 메세지를 명확하게 작성하자
5. 복규 전략을 수립하자
6. 로깅과 모니터링을 하자

throws
- 조건에 따른 throws를 할 땐 로그를 남겨 표시하기도 함

try-catch-finally
- 예외가 발생할 가능성이 있는 코드를 try 블록으로 감싸고 해당 예외를 처리하기 위한 catch 블록
- 예외를 처리하고 프로그램의 실행을 계속할 수 있도록 유도함

Spring AOP Advice 동작 순서
@Around -> @Before -> @AfterThrowing -> @After -> @AfterReturning

@ExceptionHandler 개념과 활용 방안
- Spring Framework에서 예외를 처리하는 방법 중 하나
- 특정 컨트롤러나 전역적으로 발생한 예외를 처리하는 데 사용

1. 예외 로깅
- 특정 예외 유형이나 메서드 대상
- 예외의 유형, 메시지, 타임스탬프를 기록하는 어드바이스 정의 가능

2. 트랜잭션 롤백
- 특정 예외가 발생하였을 때 트랙잭션을 롤백하는 기능
- @Transactional

3. 재시도 전략
- 지정된 횟수나 지연 시간 후에 작업을 다시 시작하는 어드바이스
- 핵심 서비스의 신뢰도 향상

4. 예외 변환
- 외부 시스템의 예외 !== 애플리케이션 예외 처리 전략
- 예외를 재정의하여 다시 발생 가능

