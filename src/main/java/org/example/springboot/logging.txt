로깅의 필요성
- 애플리케이션 디버깅, 문제 해결, 모니터링, 에러 리포트를 위한 필수 도구
- 가장 떠올리기 쉬운 예시 : 디버깅
  고객의 문제 상황을 개발 환경에서 에러 재현할 수 없는 경우도 생겨 디버깅 만으로 한계가 있음
- 로그를 사용하면 로그를 기록하는 상황에 따라 커스터마이징, 정보를 간략하게 혹은 더욱 상세하게 표시할 수 있게 구성이 가능함

로깅의 필요성
- 에러
- 예상하지 않은 동작(버그)
- 애플리케이션 변경 추적
- 주요 이벤트(서비스/모듈 시작과 종료, 로그인 등) 알림
- 제대로 서비스가 동작하고 있는지에 대한 정보성 알림

무엇을 기록할 것인가? - 로그 컨텐츠
- 프로젝트마다 요구사항에 따라 기록해야 하는 로그는 다를 수 있음
- Error : 메세지, 스택 추적, 에러 발생했을 때 애플리케이션이 실행하고 있던 작업
- Debugging : 디버깅시 필요한 세부 추적 정보, 적용되는 변수 값, 메서드 등 실행에 대한 세부 정보
- 주요 이벤트 : 로그에 저장하고 싶은 중요 이벤트, 엔티티 생성, 유저 로그인 성공, 작업 실행 등

어디에 기록할 것인가?
- 콘솔, 파일, 이메일/문자 (SMTP/SMS), 데이터베이스
- 콘솔 : 직관적, 애플리케이션 종료 혹은 콘솔 버퍼를 초과하면 내용이 휘발될 수 있음
- 파일 : 로그가 휘발되지 않고 저장됨, 눈으로 읽긴 쉽지만 프로그래밍처럼 패턴화 된 방식으로 필터링해 보기에는 다른 방법보다 어려움이 따름
- 이메일/문자 (SMTP/SMS) : 즉시 조치를 취해야 하는 등의 심각한 오류나 이벤트 시에는 관리자에게 알림이 가도록 설정
- 데이터베이스 : 로그 필터링이 쉽고 효율적 파일보다 기록 속도가 느리고 로깅 양이 많을 때 부하가 발생할 수 있지만
               NoSQL 데이터베이스 (MongoDB 등)에 저장한다면 대부분의 문제가 해결됨

어떻게 기록할 것인가? - 로깅 레벨
- 패키지, 클래스 별로 어느 정도의 정보를 로그로 남길 것인지 설정할 수 있음
- 로그의 내용에 따라 log level을 구분
  여기서는 Spring Boot에서 쓰이는 로그 프레임워크인 LogBack의 log level을 설명함
- TRACE < DEBUG < INFO < WARN <ERROR
  왼쪽으로 갈수록 상세한 수준의 로그로 다음 레벨의 내용을 포함
- ex) TRACE 로그의 경우, DEBUG, INFO, WARN, ERROR 로그를 모두 포함
- INFO 로그의 경우, 오른쪽에 적힌 WARN, ERROR 로그 모두를 포함
- ERROR : 즉시 대응해야 할 에러 레벨 로그
          대응하지 않을 경우, 애플리케이션 동작 중지 등 심각한 장애를 겪을 수 있음
- WARN : 상황에 따라 잠재적으로 위험할 수 있을 때 (예외 처리 등)
- INFO : 로그에 저장하고 싶은 중요 애플리케이션 이벤트 (운영 참고 정보)
- DEBUG : 개발 단계에서 사용 디버깅이 가능하도록 상세한 내용이 출력
- TRACE : 개발 단계에서 사용 DEBUG 레벨보다 상세하며 모든 레벨 로그가 출력

Spring Boot 기본 로깅
- Spring Boot 구동 시 뜨는 로깅
  애플리케이션 주요 이벤트가 발생할 때마다 로깅이 발생하여 따로 설정을 해주지 않아도 됨
- [application.properties] 설정에 따라 logging level을 조정할 수 있음

SLF4J 의 구현체인 LogBack
- SLF4sms Java 로깅 API에 대한 간단한 파사드
- Logback은 SLF4J의 구현체 중 하나

SLF4J(Simple Logging Façade for Java)
- 여러 로깅 프레임워크 (예 :logback, log4j, java.util.logging 등)의 복잡한 기능과 구현 세부 사항을 숨기고,
  일관된 인터페이스를 통해 로깅 기능을 제공
- SLF4J의 간단한 API를 사용하여 로그를 작성, 실제 로깅 작업은 선택한 로깅 프레임워크가 처리함
- 즉, 로깅 프레임워크의 내부 구조나 동작 방식을 알 필요 없이 로깅 기능할 사용할 수 있게 됨

SLF4J(Simple Logging Façade for Java) 의 구현체인 Logback
- Logback은 SLF4J의 구현체 중 하나로 SLF4J API를 사용하여 로그를 작성하면, 실제 로깅 작업은 logback이 처리함
- springboot starter 로 만들어 springboot-web 의존성이 추가 되어있으면 기본적으로 logback 로그 프레임워크를 사용할 수 있음
- Spring Boot 는 Logback에 대한 기본 설정을 제공하므로, 별도의 설정 없이 바로 로깅 시작 가능
  필요한 경우, 사용자 정의 설정을 통해 로깅 동작을 세부적으로 조절할 수 있음

Logback 사용하기
- Spring-boot-starter로 만들어 spring-boot-starter-web 의존성이 추가되어 있으면 기본적으로 Logback 로그 프레임워크를 사용할 수 있음

Logback 설정
- application.properties 파일 에서 간단히 설정하는 방법이 있고
  logback-spring.xml 파일을 만들어 세부 설정하는 방법이 있음
- Resource 폴더 밑에 위치해두면 설정을 읽음

Spring Actuator 란?
- Spring Actuator: Spring Boot 애플리케이션 상태 모니터링 및 관리 도구
- 주요 기능: 헬스 체크, 환경 정보, 로그, 트래픽 상태 실시간 확인
- 이점 : 운영 상태 모니터링, 문제 빠른 감지 및 대응

Spring Boot의 내장 기능
- 자동 구성: Spring Boot의 내장 기능으로 설정 간소화
- 내장 Actuator: 기본 포함, 간단한 설정으로 사용 가능
- 주요 엔드포인트: /actuator/health, /actuator/info 등

애플리케이션의 상태 정보 확인
- 헬스 체크: "/actuator/health"로 현재 상태 확인
- 환경 정보: "/actuator/env"로 환경 변수 및 프로퍼티 확인
- 사용 사례: 운영 환경에서 자주 사용되는 엔드포인트의 사용률 체크

HTTP와 JMX를 통한 앱 관리
- HTTP 관리: HTTP를 통한 애플리케이션 상태 모니터링 및 관리
- JMX 지원: JMX(Java Management Extensions)로 정교한 관리 작업 가능
- 확장성: 커스텀 엔드포인트 정의로 Actuator 기능 확장 가능

Actuator 설정방법
- "build.gradle"에 의존성 추가 : implementation 'org.springframework.boot:spring-boot-starter-actuator'
- 접속 방법 : "http://{server}:{port}/actuator“ 로 접속

주요 엔드포인트
- "/health" : 애플리케이션 건강 상대 확인
- "/metrics" : 다양한 측정 지표 제공
- "/info" : 애플리케이션 정보 제공

유용한 메트릭 정보
- "application.ready.time" : 애플리케이션 준비 시간
- "jvm.threads.live" : 현재 JVM의 활성 스레드 수
- "process.cpu.usage" : CPU 사용률 등 다양한 지표

Actuator의 추가 기능
- Git 브랜치, 커밋 정보
- AutoConfiguration 정보
- Java, OS 정보
- 실행 중 로깅 레벨 변경

