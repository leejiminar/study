Model
- 요리
- 작업 처리 결과 데이터
Controller
- 주문 받기 & 서빙
- 사용자 입력/전달/업데이트
View
- 플레이팅
- 유저 인터페이스

3 계층 구조
Controller ( API 계층 )
- 역할 : 사용자 인터페이스 처리
- 구성 요소 : 컨트롤러, 뷰
- 기능 : 사용자 요청 수신
        비즈니스 로직 호출
        결과를 사용자에게 표시
Service ( 비즈니스 계층 )
- 역할 : 애플리케이션의 비즈니스 로직 처리
- 구성 요소 : 서비스
- 기능 : 트랜잭션 관리
        데이터 검증
        도메인 로직 실행
Repository ( 데이터 액세스 계층 )
- 역할 : 데이터 처리 및 저장
- 구성 요소 : 리포지토리, 데이터베이스
- 기능 : CRUD 작업 수행
        데이터에 대한 직접적인 접근

Lombok 주요 기능
@Getter : 필드에 대한 getter 메서드 자동 생성
@Setter : 필드에 대한 setter 메서드 자동 생성
@NoArgsConstructor : 매개변수가 없는 기본 생성자 생성
@AllArgsConstructor : 모든 필드를 매개변수로 받는 생성자 생성
@RequiredArgsConstructor : final로 선언된 필드만 매개변수로 받는 생성자 생성
@ToString : 모든 필드를 포함하는 toString 메서드 생성
@EqualsAndHashCode : equals와 hashCode 메서드 생성

DTO (Data Transfer Object)
- 데이터 전송을 위한 객체
- 주로 네트워크를 통한 데이터 전송 시 사용
- 데이터 전송 최적화
- 필요한 데이터만 포함
- 보안 및 데이터 노출 방지
- EX) 사용자 등록 시 필요한 데이터만 포함하는 DTO

Entity 클래스
- 데이터베이스 테이블에 매핑이되는 객체
- 비즈니스 로직을 포함하고 DB와 직접 상호작용
- 비즈니스 로직을 포함하여 도메인 모델을 구성
- EX) 사용자 정보를 포함하는 Entity

DTO <----> Entity 매핑의 필요성
1. 데이터 노출 위험 : Entity가 클라이언트에 직접 도촐될 경우, 민감한 정보가 유출될 수 있음
2. 불필요한 데이터 전송 : Entity의 모든 필드를 클라이언트에 전송하여 성능 저하를 초래
3. 유지보수 어려움 : DB 구조 변경 시 Entity 수정 필요, 클라이언트에 영향 큼
4. 비즈니스 로직 분리 부족 : 비즈니스 로직과 데이터 전송 로직이 혼재되어 코드 가독성 저하
5. 테스트 어려움 : 모듈화 부족으로 단위 테스트 및 통합 테스트가 복작해짐 (추후 학습)

DTO와 Entity 비교
특징        |       DTO         |      Entity
포함 데이터  |  필요한 데이터만     |  전체 도메인 데이터
변경 가능성  | 불변 객체로 설계 가능 |    상태 변경 가능

DTO <--> Entity 매핑 방법
1. 수동 매핑: 수동으로 속성을 복사
2. 자동 매핑: Mapstruct 라이브러리
          - 정적 코드 생성기
          - 컴파일 시점에 매핑 코드를 자동으로 생성
          - 매핑 로직을 간결하게 작성 가능
          - 런타임 오버헤드 없음