JDBC란?
- 서버가 데이터베이스와 연결되는 기본 동작
1. 커넥션 연결
2. SQL 전달
3. 결과 응답
- 데이터베이스마다 커넥션 연결 방법과 SQL 전달 방법, 결과 응답 받는 방법이 모드 다름 -> 데이터베이스 변경에 취약
- 이를 해결핧 수 있는 수단이 JDBC
- Java DataBase Connectivity
- Java에서 데이터베이스와 연결을 위한 API
- 데이터베이스에 맞는 JDBC Driver를 사용

JDBC Driver
- JDBC API와 데이터베이스 간의 통신을 담당하는 소프트웨어
- Java 애플리케이션이 다양한 DB에 접근할 수 있도록 지원
- 다양한 벤더에서는 해당 벤더에 맞는 JDBC Driver를 지원

JDBC 표준 인터페이스
- 3 가지 기능을 표준 인터페이스로 정의하여 제공
1. Connection : 데이터베이스와의 연결
2. Statement : SQL 쿼리 실행
3. ResultSet : 쿼리 결과 집합

Connection Pool
- 데이터베이스 연결을 미리 생성하여 관리하는 객체 집합
- 데이터베이스 연결 생성 비용 절감 및 성능 향상

Connection Pool 동작 원리
- 초기화 : 애플리케이션 시작 시 미리 일정 수의 커넥션 생성
- 사용 : 요청 시 커넥션을 풀에 가져와 사용
- 반환 : 사용 후 커넥션을 풀에 반환
- 재사용 : 반환된 커넥션을 다음 요청에 재사용

SQL 중심 기술
- SQL 쿼리를 사용하여 데이터베이스와 상호작용
- SQL 쿼리에 의존, 스키마의 변경에 민감
- JDBC, MyBatis, JOOQ 등

JdbcTemplate
- JDBC 지원 라이브러리, JDBC API의 복잡성 감소
- SQL 쿼리 실행 및 결과 처리
- 반복적인 JDBC 코드의 간소화
- 손쉬운 Java 객체 매핑 및 트랜잭션 처리
1. 구조적인 반복의 해결
2. 손쉬운 트랙잭션 처리

JdbcTemplate 적용 흐름
1. 의존성 라이브러리 추가(h2 DB 사용)
2. 데이터베이스 설정
3. 사용자 엔티티 클래스
4. UserRepository 클래스

객체 중심 기술
- 객체와 데이터베이스 간의 매핑을 통한 데이터 액세스
- 객체 지향 프로그래밍과 통합
- ORM(Hibernate, JPA), Spring Data

Spring Data JDBC란?
- Spring Data 프로젝트의 일환
- JDBC 기반 간단하고 직관적인 통신 방법 제공
- 경량화: ORM보다 가벼운 데이터 접근
- 직접 매핑: 데이터베이스 테이블과 객체 간의 직접 매핑

Spring Data JDBC 기본 사용법
- CommandLineRunner를 통한 데이터베이스 초기화
- 상품 Entity 클래스와 컨트롤러
- ProductService 서비스 클래스

연관 관계 매핑
- 데이터베이스의 엔티티 간 관계를 정의하는 방법
- 객체 모델과 관계형 데이터베이스 간의 일관성을 유지

엔티티 기본 매핑
- @Entity : 해당 클래스가 엔티티임을 명시
- @Table : 데이터베이스에서 사용할 테이블 이름을 명시
- @Id : 에티티의 고유 식별자 필드를 정의
        데이터베이스에서 기본키로 사용
- @GeneratedValue : 기본 키의 값을 자동으로 생성하는 설정
                    기본키 생성 전략 설정 가능
                    GenerateType.IDENTITY는 데이터베이스에서 자동 증가 사용
- @Column : 필드에 대한 제약 조건을 설정
            name, nullable, unique 등 옵션 작용 가능

연관 관계 방향성
- 단방향 : 두 엔티티 관계에서 한쪽 엔티티만 참조
- 양방향 : 두 엔티티 관계에서 양쪽 엔티티가 서로 참조.
          A -> B, B -> A
- 게시글 객체가 참조 변수를 통해 댓글 객체만 참조 하는 경우 => 단방향
- 댓글 객체도 객체를 참조 변수를 통해 참조하는 경우 = > 양방향
