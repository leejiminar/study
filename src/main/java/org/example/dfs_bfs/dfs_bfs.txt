깊이 우선 탐색(DFS)
- DFS(Depth First Search)
- 특정 정점(노드)에서 시작해서 트리나 그래프에서 한가지 경로를 최대한 깊게 탐색하고, 해당 경로를 끝까지
  탐색한 후 다른 경로로 이동
- 미로를 탐색할 때 한 방향으로 갈 수 있을 때까지 계속 가다가, 더 이상 갈 수 없게 되면 다시 가장 가까운 갈림길로
  돌아와서 다른 방향으로 다시 탐색을 진행하는 방법과 유사
- 모든 정점을 방문하고자 하는 경우에 사용
- 일반적으로 재귀 함수를 사용하여 구현 스택(Stack)으로도 구현 가능
- 모든 경우의 수에 대해 탐색을 진행
- 사이클이 있는 경우, 무한 루프에 빠지지 않도록 방문 체크를 해주어야 함
- 사이클(Cycle) : 그래프에서 한 노드에 시작해, 여러 간선을 지나 시작 노드로 다시 도착하는 경로
- BFS보다 깊은 경로를 빠르게 찾는데 용이

DFS의 진행 순서
- 한 방향으로 갈 수 있을 때까지 계속 가다가, 더 이상 갈 수 없게 되면
  다시 가장 가까운 분기점으로 돌아와서 다른 방향으로 다시 탐색을 진행

DFS의 구현
- 함수 DFS(now) : 현재 노드를 방문한 것으로 표시 현재 노드를 출력
- 모든 이웃 노드 'next'에 대해서 반복 : 만약 'next'를 아직 방문하지 않았다면 DFS(next)

DFS의 시간 복잡도
- V -> 정점(노드)의 수, E ->간선의 수
- 인접 리스트로 표현된 그래프 : 0(V + E)
- 인접 행렬로 표현된 그래프 : 0(V2)
- 희소 그래프의 경우 인접 행렬보다 인접 리스트를 사용하는 것이 유리
- 희소 그래프(Sparse Graph) -> 그래프 내에 적은 숫자의 간선만을 가지는 그래프

너비 우선 탐색 (BFS)
- BFS(Breadth First Search)
- 하나의 정점으로부터 시작하여 차례대로 모든 정점들을 한 번씩 방문하는 것
- 루트 노드(혹은 다른 임의의 노드)에서 시작해서 인접한 노드를 먼저 탐색하는 방법
- 두 노드 사이의 최단 경로 혹은 임의의 경로를 찾고 싶을 때 사용
- 재귀적으로 동작하는 DFS와 달리 BFS는 주로 큐(Queue)를 사용
- 사이클이 있는 경우, 무한 루프에 빠지지 않도록 방문 체크를 해주어야 함
- 물웅덩이에 돌멩이를 하나 던지면, 파동이 전체 방향으로 퍼져나가는 동심원의 형태로 탐색이 진행

BFS의 동작 순서
- 특정 노드에서 시작하여, 인접한 노드를 먼저 탐색

DFS와 BFS의 공통점 및 차이점
- 공통점 : 그래프에서 시작 노드로부터 목적지 노드까지 도달하거나 특정 정보를 찾는 것이 못표
          방문 기록을 체크함으로써, 이미 방문한 노드를 다시 방문하지 않게 하여 무한 루프 방지
- 차이점 : DFS는 주로 재귀로 구현하지만, BFS는 큐(queue) 자료 구조를 활용하여 구현
          동작 순서 상 DFS는 트리를 탐색할 때 주로 사용, BFS는 최단 경로 탐색에 자주 사용

