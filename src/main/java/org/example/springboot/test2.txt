통합 테스트란?
- 정의 : 여러 모듈이나 컴포넌트를 결합하여 전체 시스템의 동작을 검증하는 테스트 방법
- 목적 : 개별 모듈 간 상호작용과 인터페이스의 정확성 확인
- 범위 : 단위 테스트보다 넓고, 시스템 테스트보다는 좁은 범위

통합 테스트 vs 단위 테스트
    항목          통합 테스트                              단위 테스트
 테스트 대상     여러 모듈의 조하브 전체 시스템의 일부       개별 모듈이나 함수
 테스트 환경     실제와 유사한 환경, 실제 의존성 사용       격리된 환경,의존성 최소화
 테스트 목적     컴포넌트 간 상호작용, 전체 기능 검증        개별 기능의 정확성

통합 테스트의 중요성
- 시스템 전체의 안정성 확보
- 인터페이스 오류 발견
- 실제 환경과 유사한 테스트
- 회귀 테스트 용이

통합 테스트를 통한 이점
- 품질향상
- 비용절감
- 개발 속도 향상
- 문서화

통합 테스트 개요 - 요약
- 통합 테스트는 여러 모듈의 상호작용을 검증하는 중요한 과정
- 단위 테스트와 달리 실제 환경과 유사한 조건에서 테스트 수행
- 시스템 전체의 안정성 확보와 인터페이스 오류 발견에 중요한 역할
- 품질 향상, 비용 절감, 개발 속도 향상 등 다양한 이점 제공

통합 테스트의 주요 목적
- 모듈 간 상호작용 검증
- 인터페이스 오류 발견
- 시스템 전체 기능 확인

목적 달성을 위한 전략
- 테스트 계획 수립 : 각 목적에 맞는 테스트 케이스 설계
- 자동화 도구 활용 : 반복적인 테스트 수행 효율화
- 실제 환경 모방 : 프로덕션과 유사한 테스트 환경 구성
- 지소적 통합(CI) : 빠른 피드백 루프 구축
- 테스트 커버리지 관리 : 주요 기능 및 시나리오 포괄

통합 테스트의 목적 - 요약
- 모듈 간 상호작용 검증으로 시스템 안정성 확보
- 인터페이스 오류 조기 발견으로 개발 비용 절감
- 시스템 전체 기능 확인으로 사용자 만족도 향상
- 세 가지 목적의 균형 있는 달성이 중요

통합 테스트 전략의 유형
1. 비 점진적 전략
2. 점진적 전략
 - 하향식(Top-down) 접근법
 - 상향식(Bottom-up) 접근법
 - 혼합(Hybrid) 접근법

비 점진적 전략(Big Bang 접근법)
- 정의 : 모든 모듈을 한 번에 통합하여 테스트하는 방식
- 특징 : 간단한 시스템에 적함, 빠른 통합 가능
- 장점 : 전체 시스템 동작을 빠르게 확인 가능, 별도의 스텁이나 드라이버 불필요
- 단점 : 오류 발견 및 수정이 어려움, 대규모 시스템에는 부적합

점진적 전략
- 정의 : 모듈을 단계적으로 통합하여 테스트하는 방식
- 종류 : 하향식(Top-down) 접근법, 상향식(Bottom-up) 접근법, 혼합(Hybrid) 접근법
- 공통 장점 : 오류 발견 및 수정 용이, 체계적인 통합 가능

하향식 접근법(Top-down 접근법)
- 정의 : 최상위 모듈부터 시작하여 하위 모듈로 통합해 나가는 방식
- 프로세스 : 1. 최상위 모듈 테스트
            2. 하위 모듈을 스텁으로 대체
            3. 점진적으로 실제 하위 모듈과 교체
- 장점 : 주요 기능 검증 가능, 설계 오류 조기 발견
- 단점 : 하위 모듈 테스트 지연, 복잡한 스텁 필요

상향식 접근법(Bottom-up 접근법)
- 정의 : 최하위 모듈부터 시작하여 상위 모듈로 통합해 나가는 방식
- 프로세스 : 1. 최하위 모듈 테스트
            2. 상위 모듈을 드라이버로 대체
            3. 점진적으로 실제 상위 모듈로 교체
- 장점 : 하위 모듈 테스트 가능, 병렬 개발 및 테스트 용이
- 단점 : 전체 시스템 관점의 테스트 지연, 주요 설계 문제 늦게 발견 가능

혼합 접근법(Hybrid 접근법)
- 정의 : 하향식과 상향식 접근법을 결합한 방식
- 특징 : 시스템을 여러 계층으로 나누어 접근
        각 계층에 적합한 전략 선택
- 장점 : 하향식과 상향식의 장점 결함, 복잡한 시스템에 적합, 유여한 테스트 전략 수립 가능
- 단점 : 복잡한 계획 및 관리 필요, 테스트 조정의 어려움

통합 테스트 전략 선택 기준
- 시스템 복잡도
- 개발 일정 및 자원
- 리스트 수준
- 모듈 간 의존성
- 팀의 경험 및 선호도

통합 테스트전략 - 요약
- 비점진적 전략 : 간단한 시스템에 적합, 빠른 통합
- 점진적 전략 : 복잡한 시스템에 적합, 체계적 접근
            - 하향식 : 주요 기능 검증
            - 상향식 : 하위 모듈 테스트
            - 혼합 : 유연성과 효율성 극대화
- 프로젝트 특성에 맞는 전략 선택

하향식 통합 테스트란?
- 정의 : 최상위 모듈부터  시작하여 하위 모듈로 점진적으로 통합하는 방식
- 기본 원리 : 상위 모듈 테스트 시 하위 모듈을 스텁으로 대체

하향식 통합 테스트의 주요 특징
- 계층적 접근 : 시스템 구조를 따라 위에서 아래로 진행
- 점진적 통합 : 단계별로 실제 모듈을 추가하며 테스트
- 깊이 우선, 너비 우선 : 상황에 따라 접근 방식 선택 가능
- 스텁 사용 : 아직 개발되지 않은 하위 모듈 대신 스텁 활용
- 인터페이스 중심 : 모듈 간 인터페이스에 초점을 맞춘 테스트

하향식 통합 테스트의 장점
- 주요 기능 조기 검증 : 핵심 모듈부터 테스트하여 중요 기능 확인
- 아키텍처 검증 : 시스템 구조의 타당성을 초기에 평가 가능
- 인터페이스 오류 조기 발견 : 모듈 간 인터페이스 불일치 빠르게 식별
- 데모 용이성 : 상위 수준 기능부터 구현되어 진행 상황 시연 편리
- 걸계 오류 조기 발견 : 전체 시스템 관점에서의 문제점 조기 식별 가능

스텁(Stub) 모듈의 역할과 사용
- 하위 모듈 테스트 지연 : 낮은 수준의 모듈은 늦게 테스트됨
- 스텁 제작의 복잡성 : 복잡한 하위 모듈의 스텁 제작이 어려울 수 있음
- 병렬 작업의 어려움 : 하위 모듈 개발팀의 대기 시간 발생 가능
- 전체 시스템 완성 시점 지연 : 모든 레벨의 통합이 완료되어야 함
- 하위 레벨 오류 숨김 : 스텁으로 인해 실제 하위 모듈의 오류가 masking 될 수 있음

하향식 통합 테스트 진행 과정
- 1단계 : 최상위 모듈 테스트
- 2단계 : 직접 연결된 하위 모듈을 스텁으로 대체
- 3단계 : depth or breadth 우선 순위에 따라 다음 레벨 통합
- 4단계 : 스텁을 실제 모듈로 점진적 교체
- 5단계 : 각 단계마다 회귀 테스트 수행
- 모든 모듈이 통합될 때 까지 반복

하향식 통합 테스트 - 요약
- 시스템의 상위 구조부터 테스트하는 체계적 접근법
- 주요 기능과 아키텍처를 조기에 검증할 수 있는 장점
- 스텁 모듈 사용으로 인한 복잡성 관리가 중요
- 프로젝트의 특성과 리스크를 고려하여 적용 여부

상향식 통합 테스트란?
- 정의 : 최하위 모듈부터 시작하여 상위 모듈로 점진적으로 통합하는 방식
- 기본 원리 : 하위 모듈 테스트 시 상위 모듈을 드라이버로 대체

상향식 통합 테스트의 주요 특징
- 기초부터 구축 : 시스템의 기본 구성 요소부터 테스트
- 점진적 통합 : 테스트된 모듈을 단계적으로 결합
- 병렬 개발 가능 : 여러 하위 모듈을 동시에 개발 및 테스트
- 드라이버 사용 : 아직 개발되지 않은 상위 모듈 대신 드라이버 활용
- 실제 데이터 흐름 : 하위 모듈부터 실제 데이터 처리 검증

상향식 통합 테스트의 장점
- 하위 모듈 조기 테스트 : 기본 기능부터 검증하여 안전성 확보
- 병렬 개발 용이 : 여러 팀이 동시에 작업 가능
- 실제 데이터 처리 : 초기부터 실제 데이터 흐름 확인 가능
- 드라이버 구현 용이 : 상위 모듈보다 드라이버 제작이 상대적으로 간단
- 문제 격리 용이 : 오류 발생 시 하위 모듈부터 체계적 검사 기능

상향식 통합 테스트의 단점
- 늦은 시스템 구조 검증 : 전체 시스템 구조의 문제점을 늦게 발견
- 주요 기능 늦은 테스트 : 핵심 비즈니스 로직 검증이 후반부에 이루어짐
- 인터페이스 불일치 위혐 : 모듈 간 인터페이스 문제를 늦게 발견할 수 있음
- 초기 시연의 어려움 : 완성된 기능을 보여주기까지 시간 소요
- 테스트 범위 증가 : 상위로 올라갈수록 테스트 케이스 수가 증가

드라이버(Driver) 모듈의 역할과 사용
- 정의 : 아직 개발되지 않은 상위 모듈을 대신하는 테스트용 프로그램
- 목적 : 하위 모듈 호출 및 테스트, 테스트 데이터 제공 및 결과 검증
- 구현 방식 : 테스트할 모듈의 인터페이스에 맞춰 구현, 다양한 테스트 케이스 실행 가능하도록 설계
- 주의 사항 : 실제 모듈의 기능을 정확히 시뮬레이션, 테스트 결과의 정확한 검증 로직 포함

상향식 통합 테스트 진행 과정
- 1단계 : 최하위 모듈 테스트
- 2단계 : 드라이버를 사용해 하위 모듈 그룹테스트
- 3단계 : 테스트 된 모듈 그룹을 다음 레벨로 통합
- 4단계 : 드라이버를 실제 상위 모듈로 점진적 교체
- 5단계 : 각 통합 단계 마다 회귀 테스트 수행
- 전체 시스템이 통합될 때까지 반복

상향식 통합 테스트 - 요약
- 시스템의 기본 구성 요소부터 테스트하는 체계적 접근법
- 하위 모듈의 안정성을 조기에 확보할 수 있는 장점
- 드라이버 모듈을 효과적으로 활용하는 것이 중요
- 프로젝트의 구조와 개발 일정을 고려하여 적용 여부 결정

결함도 기반 통합 테스트란?
- 정의 : 모듈 간 결함도를 기준으로 테스트 케이스를 설계하고 실행하는 방법
- 목적 : 모듈 간 상호작용과 데이터 흐름의 정확성 검증
- 중요성 : 시스템의 안정성과 유지보수성 향상

결함도 기반 커버리지 기준
- 모든 결합 호출 커버리지 : 모든 모듈 간 호출이 최소 한 번 실행되었는지 확인
- 모든 결합 데이터 항목 커버리지 : 모듈 간 전달되는 모든 데이터 항목이 테스트되었는지 확인
- 모든 결합 조건 커버리지 : 모든 호출 시 발생할 수 있는 모든 조건이 테스트되었는지 확인
- 결합 경로 커버리지 : 모듈 간 모든 가능한 데이터 흐름 경로가 테스트되었는지 확인

결합 경로(Coupling Path)의 이해
- 한 모듈에서 다른 모듈로 데이터가 전달되는 실행 경로
- 구성요소 : 1. 출발점 : 데이터를 정의하거나 수정하는 지점
           2. 경로 : 데이터가 전달되는 모듈 간의 연결
           3. 도착점 : 데이터를 사용하는 지점

결함 경로의 주요 유형
- 단순 결합 경로 : 두 모듈 간 직접적인 데이터 전달
- 복합 결합 경로 : 여러 모듈을 거쳐 데이터가 전달됨
- 순환 결합 경로 : 데이터가 원래 모듈로 돌아오는 경로
- 조건부 결합 경로 : 특정 조건에 따라 데이터 전달 경로가 변경됨

결함도 기반 테스트 전략
- 높은 결합도 우선 테스트
  내용 결합도, 공통 결합도 등 높은 결합도를 가진 모듈 간 상호작용 집중 테스트
- 복잡한 결합 경로 식별 및 테스트
  여러 모듈을 거치는 복잡한 데이터 흐름 경로에 대한 중점적 테스트
- 경계값 및 예외 상황 테스트
  모듈 간 데이터 전달 시 경계값과 예외 상황에 대한 처리 검증
- 결합도 감소를 위한 리팩토링 제안
  테스트 결과를 바탕으로 높은 결합도 감소를 위한 개선 방안 제시

결함도 기반 통합 테스트 - 요약
- 결함도 유형을 이해하고 각 유형에 맞는 테스트 전략 수립
- 다양한 커버리지 기준을 적용하여 철저한 테스트 수행
- 결합 경로 개념을 활용하여 복잡한 모듈 간 상호작용 검증
- 결합도 기반 테스트를 통해 시스템의 안정성과 유지보수성 향상

통합 테스트 적용 시 주요 고려사항
1. 모듈 의존성 분석
2. 테스트 우선순위 결정
3. 스캐폴딩 코드 관리

모듈 읜존성 분석
- 정의 : 시스템 내 모듈 간 관계와 상호작용 파악
- 목적 : 테스트 순서 결정, 잠재적 문제 영역 식별, 효율적인 테스트 계획 수립
- 분석 방법 : 의존성 그래프 작성, 순환 의존성 식별, 결합도 수준 평가, 인터페이스 복잡도 분석
- 도구 활용 : 정적 코드 분석 도구, UML 다이어그램

테스트 우선순위 결정
- 중요성 : 제한된 시간과 자원의 효율적 활용
- 우선순위 결정 기준
  비즈니스 중요도 -> 리스크 수준 -> 복잡도 -> 변경 빈도 -> 의존성 정도
- 우선순위 결정 방법
  리스크 기반 접근법, 가중치 부여 방식, 전문가 판단

스캐폴딩 코드 관리
- 정의 : 테스트를 위해 임시로 사용되는 보조 코드 (스텁,드라이버 등)
- 목적 : 아직 개발되지 않은 모듈의 기능 시뮬레이션
- 주요 관리 포인트 : 1. 버전관리
                  2. 문서화
                  3. 유지 보수
                  4. 제거 계획
- 스캐폴딩 코드 작성 원칙 : 단순성 유지, 실제 코드와 구분되는 명명 규칙 사용, 명확한 주석 처리, 최소한의 기능만 구현

통합 테스트 적용 프로세스
- 모듈 의존성 분석 수행 -> 분석 결과를 바탕으로 테스트 우선순위 결정 -> 테스트 계획 수립
-> 필요한 스캐폴딩 코드 설계 및 구현 -> 우선순위에 따라 단계적으로 통합 테스트 실행 -> 테스트 결과 분석 및 문제 해결
-> 스캐폴딩 코드 관리 및 점진적 제거 -> 프로세스 반복 및 개선

통합 테스트 적용 시 고려사항 - 요약
- 모듈 의존성 분석을 통한 시스템 구조 이해
- 비즈니스 가치와 ㄱ리스크를 고려한 테스트 우선순위 설정
- 효과적인 스캐폴딩 코드 관리로 테스트 효율성 향상
- 세 가지 요소의 균현 있는 고려가 성공적인 통합 테스트의 핵심

통합 테스트의 장점
- 시스템 전체 동작 검증 : 개별 모듈의 정상 작동이 전체 시스템의 정상 작동을 보장하지 않음
- 인터페이스 오류 조기 발견 : 모듈 간 데이터 전달 및 통신 문제 식별
- 실제 환경과 유사한 테스트 : 프로덕션 환경에 가까운 조건에서 테스트 수행
- 회귀 테스트 용이성 : 시스템 변경 후 전체 기능의 정상 작동 확인 가능
- 성능 및 확장성 검증 : 여러 모듈이 결합된 상태에서의 성능 평가 가능
- 문서화 및 명세 역할 : 테스트 케이스가 시스템 동작의 명세 역할 수행

통합 테스트의 단점
- 테스트 환경 구축의 복잡성 : 여러 모듈을 결합한 테스트 환경 설정에 시간과 비용 소요
- 오류 원인 파악의 어려움 : 여러 모듈이 관여하여 정확한 오류 위치 특정이 어려울 수 있음
- 테스트 실행 시간 증가 : 단위 테스트에 비해 실행 시간이 길어짐
- 의존성 관리의 어려움 : 외부 시스템이나 리소스에 대한 의존성 처리 필요
- 높은 유지보수 비용 : 시스템 변경 시 관련 통합 테스트의 수정이 필요
- 테스트 커버리지 확보의 어려움 : 모든 가능한 시나리오를 커버하기 어려움

효과적인 사용을 위한 팁
1. 테스트 자동화 도구 활용
 - 반복적인 테스트 실행 및 결과 분석 자동화
2. 테스트 환경의 일관성 유지
 - 동일한 테스트 결과를 보장하는 안정적인 환경 구축
3. 모듈화된 설계 지향
 - 느슨한 결합도와 높은 응집도를 가진 모듈 설계로 테스트 용이성 향상
4. 테스트 데이터 관리
 - 다양한 시나리오를 커버하는 테스트 데이터 세트 준비
5. 단계적 통합 접근
 - 점진적으로 모듈을 통합하여 복잡성 관리
6. 목(Mock) 객체 활용
 - 외부 의존성을 가진 부분을 목 객체로 대체하여 테스트 용이성 향상
7. 지속적 통합(CI) 환경과의 연동
 - 코드 변경 시 자동으로 통합 테스트 실행
8. 테스트 우선순위 설정
 - 중요도와 리스크를 고려한 테스트 케이스 우선순위 결정

상황에 따른 통합 테스트 전략 선택
1. 빅뱅 방식
 - 간단한 시스템, 짧은 개발 기간
2. 하향식 방식
 - 상위 모듈 우선 개발, 인터페이스 조기 검증 필요 시
3. 상향식 방식
 - 재사용 가능한 컴포넌트 개발, 하위 모듈 안정성 중요 시
4. 샌드위치 방식
 - 복잡한 대규모 시스템, 상하위 모듈 동시 개발 시

통합 테스트의 장단점 - 요약
- 장점 : 전체 시스템 동작 검증, 인터페이스 오류 조기 발견
- 단점 : 환경 구축 복잡성, 오류 원인 파악 어려움
- 효과적 사용 팁 : 자동화 도구 활용, 모듈화된 설계, 단계적 접근
- 프로젝트 특성에 맞는 적절한 통합 테스트 전략 선택이 중요

스프링 부트 통합 테스트 구성 요소
- @SpringBootTest 어노테이션
- @AutoConfigureMockMvc 설정
- MockMvc 객체
- 기타 필요한 설정 및 의존성

@SpringBootTest 어노테이션의 역할과 사용법
- 모든 빈을 로드하여 통합 테스트 환경 구성
- 실제 데이터베이스 연동 가능
- 전체 애플리케이션 구성을 테스트에 반영

@AutoConfigureMockMvc 설정 방법
- MockMvc 객체 자동 구성
- 컨트롤러 테스트를 위한 환경 자동 설정
- HTTP 요청 / 응답을 시뮬레이션 할 수 있는 기능 제공

스프링 부트 기반 통합 테스트 환경 - 요약
- @SpringBootTest 로 전체 애플리케이션 컨텍스트 로드
- @AutoConfigureMockMvc 로 MockMvc 자동 구성
- ObjectMapper 를 이용한 JSON 변환
- @BeforeEach 를 활용한 테스트 데이터 관리
- 실제 데이터베이스 연동을 위한 end-to-end 테스트 가능

MockMvc 란?
- 스프링 MVC 테스트를 위한 메인 진입점
- 서버를 실행하지 않고 스프링 MVC의 동작을 재현
- HTTP 요청에 대한 시뮬레이션 제공, 컨트롤러, 필터, 리솔버 등 전체 스프링 MVC 인프라 테스트 가능

좋은 테스트 케이스의 특징
- 명확성 : 테스트의 목정이 분명함
- 가독성 : 쉽게 이해할 수 있는 구조
- 유지보수성 : 변경에 유연하게 대응
- 신뢰성 : 일관된 결과 제공
- 독립성 : 다른 테스트와 격리됨

테스트 케이스 작성 Best Practices
- 하나의 테스트는 하나의 개념만 검증
- 테스트 간 독립성 유지
- 명확하고 일관된 네이밍 규칙 사용
- 테스트 데이터는 테스트 내에서 직접 생성
- 실패 케이스도 반드시 테스트
- 테스트 코드도 리팩토링 대상으로 관리

